lec20 37:00 ~

16. Spring boot
	- spring legacy project에 비해 설정이 간소화됨.
	- 톰캣이 포함되어 서버 설정이 간소화 됨.
	- web.xml, servlet-context.xml, root-context.xml이 포함되어 설정 간소화
 
 1) Spring Starter Project생성
  1> 프로젝트 작성 form
 	- service url : 스프링 공식사이트. 라이브러리 파일 다운로드 등에 참조됨
 		> maven라이브러리를 좀더 안정적으로 사용가능 
 	- Name: 프로젝트 이름(spring03_boot)
 	- group : 도메인(회사, com.example)
 	- Artifact: 프로젝트 이름(spring03_boot)
 	
  2> 의존관계 생성 선택
  	- pom.xml에 기입 또는 처음 생성시 화면에서 라이브러리 선택가능
  	- 스프링 부트 버전, 라이브러리 선택
	- Boot Version : 최신버전
	- SQL : JDBC, MyBatis, MySQL체크
	- Template Engines : Thymeleaf 체크
		> jsp기술에 종속되지 않도록 template engine사용 권장 (- *spring은 안드로이드, 자바, 닷넷 등에서 사용)
		> Template Engine : 프로그래밍 언어에 관계없이 html틀을 만들어내는 것
	- Web : Web체크
	
 2) Spring boot 프로젝트의 실행 방법
 	- 시작클래스 : 프로젝트 이름 + Application.java
 		> web project지만 java로 구동
 	- tomcat이 내장되어 있음
 	- Run as Spring Boot App
 	- 기존에 실행중인 톰캣은 중지시키고 실행시켜야 함	

 3) 템플릿 엔진
 	- spring boot application에서는 jsp대신 template을 사용하는 것을 권장하고 있음.
 	- spring boot 에서 사용가능한 template 중 Thyme leaf사용
 	- template : jsp도 일종의 템플릿(jsp를 실행시키면 html이 결과물로 출력됨)
 	- 웹 템플릿 엔진 : 스프링 MVC와의 통합 모듈을 제공하며, 애플리케이션에서 jsp로 만든 기능들을 완전히 대체
 	
 4) jsp를 뷰로 사용하는 방법
 	- jsp를 사용하기 위해서는 추가 작업이 필요함
 		> src/main에 webapp디렉토리 추가
 		> webapp밑에 WEB-INF(필수 + 고정), views(변동가능) 디렉토리 추가
 		> application.properties 설정 (스프링 설정파일)
 		> pom.xml에서 thymeleaf라이브러리를 주석처리
 		
 5) 설정 + 프로젝트 실행
 	- 디렉토리 구조가 spring legacy project와 다름
 	- pom.xml이 간소화됨
 	- 웹브라우저에서 실행 : 서버를 실행하고 웹브라우저에서 주소를 입력하여 접속
 	
  1> pom.xml : lec20 50:00부분참조
	- <dependencies> 교체 : 기본옵션에 없는 라이브러리들 추가
		------------------------------------------------------------------------------------------------------
		<!-- 저장소 추가 (ojdbc6를 다운로드하기 위한 저장소) -->
		<repositories>
			<repository>
				<id>codelds</id>
				<url>https://code.lds.org/nexus/content/groups/main-repo</url>
			</repository>
		</repositories>
		
		<dependencies>
			<!-- @Inject -->
			<dependency>
				<groupId>javax.inject</groupId>
				<artifactId>javax.inject</artifactId>
				<version>1</version>
			</dependency>
			
			...
			
			<!-- spring boot auto restart(설정, 클래스가 바뀌면 auto restart) -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-devtools</artifactId>
				<optional>true</optional>
			</dependency>

			<!-- jsp라이브러리 -->
			<dependency>
				<groupId>org.apache.tomcat.embed</groupId>
				<artifactId>tomcat-embed-jasper</artifactId>
				<scope>provided</scope>
			</dependency>
			
			<!-- jstl 라이브러리 -->
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>jstl</artifactId>
			</dependency>

			<!-- 이번에는 사용x -->
			<!-- 오라클 라이브러리 : 메이븐 저장소에 없음. 저장소 추가-->
			<dependency>
				<groupId>com.oracle</groupId>
				<artifactId>ojdbc6</artifactId>
				<version>11.2.0.3</version>
			</dependency>
			
		<dependencies>
		------------------------------------------------------------------------------------------------------

  2> templates/application.properties
  	- DB연결 설정, 서버포트 설정, jsp사용 설정(view resolver), jsp auto restart, 에러페이지 설정 등
  	- 에러페이지 설정이 없으면 에러 발생 시 Whitelabel Error Page가 화면에 나타난다
  
  3> Spring03BootApplication.java (시작클래스)
  	- 프로젝트 생성 시 시작클래스 자동생성.
  	- 시작클래스 이름 : 프로젝트 이름 + Application.java
  	- Run as Spring Boot App으로 실행
  	
  4> HelloController작성 : com.example.spring03_boot.controller
  	- 코드 작성방식은 동일(어노테이션 등..)
  	
  5> jsp로 view 작성
  	- 디렉토리 추가하여 jsp생성 : src/main/webapp/WEB-INF/views/hello.jsp
  	
  6> jsp사용을 위해 pom.xml에서 thymeleaf 라이브러리 주석처리
  	- jsp와 thymeleaf는 동시에 사용 불가.
  	
  7> 웹 브라우저에서 실행
  	- 주소창에 url을 입력하여 실행(컨텍스트 패스는 입력하지 않음) : http://localhost/hello.do

>> lec20 종료
>> lec21 ~

 6) 스프링 부트 DB연동
  1> 방명록 table
  	Oracle =============================================================================================
	  	create table guestbook(
	  		idx number not null primary key,
	  		name varchar2(50) not null,
	  		email varchar2(50) not null,
	  		passwd varchar2(50) not null,	-- 수정/삭제를 위한 비밀번호
	  		content varchar2(4000) not null,
	  		post_date date default sysdate
	  	);
	  	
	  	-- 시퀀스 만들기
	  	create sequence guestbook_seq
	  	start with 1
	  	increment by 1
	  	nomaxvalue
	  	nochache	--캐쉬를 사용하지 않음
	  	
	  	insert into guestbook (idx, name, email, passwd, content) 
	  		values (guestbook_seq.nextval, 'kim', 'kim@nate.com', '1234', '방명록');
	  		
		-- 비밀번호 체크(맞으면 1, 틀리면 0이 리턴됨)
		select count(*) from guestbook where idx=1 and passwd='1234'
  	====================================================================================================
  	- 캐쉬를 사용하지 않음
  		> 캐쉬를 사용할 경우, 미리 여러개를 만들어서 서버에 올림 --> 발급 속도가 빠름
  		> 서버가 다운될 경우, 재시작 되었을 때 미리 만들었던 시퀀스 번호 이후로 번호가 생성 = 중간 번호 사라짐
  		
  	MySql =============================================================================================
	  	create table guestbook(
	  		idx int not null primary key auto_increment,
	  		name varchar(50) not null,
	  		email varchar(50) not null,
	  		passwd varchar(50) not null,
	  		content varchar(4000) not null,
	  		post_date datetime default now()
	  	);
	  	
	  	insert into guestbook (idx, name, email, passwd, content) 
	  		values ((select ifnull(max(idx)+1,1) from guestbook a), 'kim', 'kim@nate.com', '1234', '방명록');
	  		
	  	/* 비밀번호 체크(맞으면 1, 틀리면 0이 리턴됨) */
		select count(*) from guestbook where idx=#{idx} and passwd=#{passwd}
  	====================================================================================================

  2> 코드 작성 : 기초작업 + 목록보여주기 (패키지, java코드 작성 + list()메소드)
  	- 스프링에서 관리하여야 하는 빈(컨트롤러/서비스/DAO등)은 처음 생성되어 있던 기본 패키지에 존재하여야 인식된다.
  	- com.example.spring03_boot.model.dto : GuestbookDTO.java
  	
  	- Mybaits활용 : Interface로 mapper.xml 대체 - interface에 @Select("sql쿼리") 작성
  		> com.example.spring03_boot.model.dao : GuestbookDAO.java - list();
  			================================================================================================
			// MyBatis interface mapper (SQL 명령어가 들어간 코드)
			public interface GuestbookDAO {
				
				@Select("select * from guestbook order by idx desc")
				public List<GuestbookDTO> list();
			}
  			================================================================================================
  			- 인터페이스는 원래 인스턴스를 생성할 수 없으나, @Select어노테이션이 있어 호출 시 내부적으로 처리하여 리턴.
  			- 완성되지 않은 메서드지만, 내용 자체는 어노테이션으로 정의된 쿼리를 실행하는 것
  			- 해당 설정은 시작클래스의 @MapperScan이 설정되어 있으므로 사용가능.
  			- @MapperScan으로 정의된 위치의 모든 클래스를 검색하여 서버가 시작될 때 메모리에 객체를 올려놓고 시작
  	
  	- com.example.spring03_boot.service : GuestbookService.java, GuestbookServiceImpl.java - list()
  		====================================================================================================
		@Service //service bean으로 등록
		public class GuestbookServiceImpl implements GuestbookService {
		
			@Inject
			GuestbookDAO guestbookDao;
			
			@Override
			public List<GuestbookDTO> list() {
				return guestbookDao.list();
			}
		...
  		====================================================================================================
		> DAO interface호출
		 - 인터페이스는 원래 인스턴스를 생성할 수 없으나, @Select어노테이션이 있어 내부적으로 처리하여 리턴.
		 
	- com.example.spring03_boot.controller : GuestbookController.java - list.do
		====================================================================================================
		@Controller // controller bean으로 등록
		public class GuestbookController {
			
			@Inject // 서비스 빈 inject
			GuestbookService guestbookService;
			
			@RequestMapping("list.do")
			public ModelAndView list(ModelAndView mav) {
				mav.setViewName("list");	// view의 이름
				List<GuestbookDTO> list = guestbookService.list();
				mav.addObject("list", list);	// view에 전달할 데이터
				return mav; // view로 이동
			}
		}
		====================================================================================================

	- 시작클래스 추가설정 : Spring03BootApplication.java
		> mapper 설정
			- 의존관계: DataSource --> SqlSessionFactory --> SqlSessionTemplate --> SqlSession
			- Spring Legacy Project : root-context.xml에 <mybatis-spring:scan base-package="...">설정
				> DataSource bean
					- id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"
					- 드라이버 클래스, DB연결 설정정보
				> SqlSessionFactory bean
					- id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
					- datasource를 참조, mapper 파일 위치, mybatis설정파일 위치 정보
				> SqlSession bean
					- id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"
					- SqlSessionTemplate가 SqlSession생성
					- <constructor-arg>태그로 sqlSessionFactory 참조 설정
						<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
				
			- Spring boot : 시작클래스에서 코드로 설정 @MapperScan("com.example.spring03_boot.model")
			================================================================================================
			// 스프링 부트 애플리케이션 빈 (시작클래스)
			@SpringBootApplication
			// mapper 자동스캔
		>>	@MapperScan("com.example.spring03_boot.model")
			public class Spring03BootApplication {
			
				public static void main(String[] args) {
					SpringApplication.run(Spring03BootApplication.class, args);
				}
				
				// javax.sql.DataSource
				// 의존관계: DataSource --> SqlSessionFactory --> SqlSessionTemplate --> SqlSession
				@Bean //자바코드로 Bean을 등록
				public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {
					SqlSessionFactoryBean bean = new SqlSessionFactoryBean();
					
					// 데이터 소스 설정(application.properties 참조)
		>>			bean.setDataSource(dataSource);
					
		>>			// xml mapper를 사용할 경우 아래 코드 추가
					// Resource 클래스 import시 org.springframework.core.io.Resource;
					// classpath => src/main/java/를 의미. classpath:mappers/*Mapper.xml 
					//		--> 해당 경로 이하의 mapper파일
					// Resource[] res = new PathMatchingResourcePatternResolver()
					// .getResources("classpath:mappers/*Mapper.xml");
					// bean.setMapperLocations(res);
					
					return bean.getObject();
				}
				
				@Bean
				public SqlSessionTemplate sqlSession(SqlSessionFactory factory) {
					return new SqlSessionTemplate(factory);
				}
			}
			================================================================================================
			> @Bean SqlSession, SqlSessionFactory : mybatis에서 SqlSession을 생성하여 호출하므로 추가 설정
				- 인터페이스 mapper / xml mapper 두가지 모두 여기서 설정.
			> 데이터 소스 설정 : application.properties
			> @MapperScan으로 정의된 위치의 모든 클래스를 검색하여 서버가 시작될 때 메모리에 객체를 올려놓고 시작
	
  3> thymeleaf로 뷰 작성 : 목록화면
  	- 뷰 기본 디렉토리 : src/main/resources
  		> static : 정적요소들 js, css, image
  		> templates : 동적요소들 (*.html : 확장자는 html이나 태그에 따라 해석되어 html이 생성, 내용이 변동됨)
  			--> 방명록 목록 = db값에 따라 화면내용이 바뀜 = 동적요소 --> templates에 생성
	- 타임리프 활성화
		> application.properties에서 jsp설정 주석처리
		> pom.xml에서 thymeleaf 라이브러리 활성화

	- templates/hello.html 작성
		---------------------------------------------------------------------------------------------------
		<!DOCTYPE html>
	>>	<html xmlns:th="http://www.thymeleaf.org">
		<head>
	>>	<meta charset="UTF-8" />
		<title>Insert title here</title>
		</head>
		<body>
	>>	<h2 th:text="${message}"></h2>
		</body>
		</html>
		---------------------------------------------------------------------------------------------------
		> xml namespace(식별자)를 지정하여 문서규격 정의
			- xml규칙을 정확히 지켜야 함 (단독태그 허용 x = 여는태그, 닫는태그 둘다 작성필요.)
		> xml namespace 지정 : th= thymeleaf에 대한 namespace
		> th: 타임리프 태그의 요소
		> th:text="타임리프 변수" 변수값을 텍스트로 출력함

	- static/css/my.css
	- static/js/test.js
	- templates/error.html
	- templates/include/header.html
		----------------------------------------------------------------------------------------------------
		<!-- 타임리프의 코드조각 -->
		<head th:fragment="header">
			<script src="http://code.jquery.com/jquery-3.2.1.min.js"></script>
			<link rel="stylesheet" type="text/css" th:href="@{/css/my.css}" />
		</head>
		----------------------------------------------------------------------------------------------------
		> th:fragment="header" : 해당문서는 다른 문서의 head에 일부분으로 추가되는 것을 표시
		> th:href="@{/css/my.css} : @=리소스, {/css/my.css}=static/css/my.css
		
	- application.properties
		> custom error page : 에러 발생 시 사용자 정의 페이지로 이동
			- server.error.whitelabel.enabled=false : 기본페이지 사용옵션 끄기
		
		> thymeleaf auto refresh : 타임리프 템플릿의 내용이 바뀌면 서버재시작 필요, 옵션으로 자동설정
			- spring.thymeleaf.cache=false : 캐쉬설정을 끄면 html템플릿이 바뀌어도 서버 재시작 필요x

	- 방명록 목록화면 : templates/list.html
		======================================================================================================
		<!DOCTYPE html>
		<!-- 타임리프 템플릿 페이지의 네임스페이스 -->
		<html xmlns:th="http://www.thymeleaf.org">
		<head>
		<meta charset="UTF-8" />
		
		<!-- include에 필요 -->
		<!-- th:include="디렉토리/페이지::프래그먼트(html 코드조각) 이름" 
			th:remove="tag" 프래그먼트의 태그(바깥쪽 <head>) 제거 -->
		<meta th:include="include/header::header" th:remove="tag"></meta>	
			
		<title>Insert title here</title>
		
		<script th:src="@{/js/test.js}"></script>
		<script>
		$(function(){
			test();
		})
		</script>
		
		</head>
		<body>
		
		<span th:text="${message}"></span>
		
		<!-- 정적인 요소 : @{디렉토리} static디렉토리 -->
		<img th:src="@{images/apple.jpg}" width="50px" height="50px" />
		
		<div>방명록</div>
		
		<a href="write.do">방명록 작성</a>
		<table border="1">
			<tr>
				<th>번호</th>
				<th>이름</th>
				<th>내용</th>
				<th>날짜</th>
			</tr>
			
			<!-- 개별변수 : 집합 -->
			<!-- 타임리프 패키지 사용 : dates.format(날짜데이터, 출력형식) -->
			<!-- href="view.do?idx=3" th:href="@{}" @{정적인 텍스트(변수=값)} -->
			<tr th:each="row:${list}">
				<td><span th:text="${row.idx}"></span></td>
				<td><span th:text="${row.name}"></span></td>
				<td>
					<a th:href="@{view.do(idx=${row.idx})}">
						<span th:text="${row.content}"></span>
					</a>
				</td>
				<td><span th:text="${#dates.format(row.post_date,'yyyy-MM-dd HH:mm:ss')}"></span></td>
			</tr>
		</table>
		
		</body>
		</html>
		======================================================================================================
		> <a th:href="@{view.do(idx=${row.idx})}">
			- href="view.do?idx=3" th:href="@{}" @{정적인 텍스트(변수=값)}
			- view.do는 변하지 않고 idx= 뒤의 값만 변화
lec 21 종료
lec 22 ~
  4> 글쓰기
  	- controller : write.do - 해당 템플릿으로 화면이동 / insert.do
  		======================================================================================================
		@RequestMapping("write.do")
		public String write() {
			return "write";
		}
		
		@RequestMapping("insert.do")
		public String insert(@ModelAttribute GuestbookDTO dto) {
			guestbookService.insert(dto);
			return "redirect:/list.do"; //화면으로 이동
		}
  		======================================================================================================
  		> @ModelAttribute : 생략가능. form으로 전달받은 값을 dto에 넣어 매개변수로 전달.
  				--> (form의 name들과 필드명칭 동일하게 작성 필요)
  		
	- write.html(입력 form) 작성
		> thymeleaf사용 : 단독태그 사용하지 않도록 주의
	
	- DAO : interface에 method와 쿼리등록
		> 매개변수로 GuestbookDTO를 전달받아 쿼리 실행
		------------------------------------------------------------------------------------------------------
		@Insert("insert into guestbook (idx, name, email, passwd, content)" + 
			"values ((select ifnull(max(idx)+1,1) from guestbook a), #{name}, #{email}, #{passwd}, #{content})")
		public void insert(GuestbookDTO dto);
		------------------------------------------------------------------------------------------------------
	- service : insert()
	
  5> 상세화면
  	- list.html에서 각 제목에 hyperlink삽입
  		> <a th:href="@{view.do(idx=${row.idx})}">
  			- th: ==> 타임리프 명령어
  			- @{} ==> 정적인 요소
  			- view.do(변수=값) : http://localhost/view.do?idx=3 의 형식으로 요청

	- controller : view.do
		-----------------------------------------------------------------------------------------------------
		@RequestMapping("view.do")
		public ModelAndView view(int idx, ModelAndView mav) {
			// 이동할 뷰의 이름
			mav.setViewName("detail");
			// 뷰에 전달할 데이터
			mav.addObject("dto", guestbookService.view(idx));
			return mav; // detail.html로 데이터를 전달하고 이동
		}
		-----------------------------------------------------------------------------------------------------
		
	- service : view() - dao 호출하여 결과 리턴
	- DAO : view()와 mapper작성
		-----------------------------------------------------------------------------------------------------
		@Select("select * from guestbook where idx=#{idx}")
		public GuestbookDTO view(int idx);
		-----------------------------------------------------------------------------------------------------

	- detail.html
		-----------------------------------------------------------------------------------------------------
		<!-- 타임리프 템플릿 페이지의 네임스페이스 -->
		<html xmlns:th="http://www.thymeleaf.org">
		
		...
		
		<form name="form1">
			<table border="1" style="width:600px;">
				<tr>
					<td>이름</td>
					<td><input name="name" th:value="${dto.name}" /></td>
				</tr>
				<tr>
					<td>이메일</td>
					<td><input name="email" th:value="${dto.email}" /></td>
				</tr>
				<tr>
					<td>비밀번호</td>
					<td><input type="password" name="passwd" /></td>
				</tr>
				<tr>
					<td colspan="2">
						<textarea name="content" rows="5" cols="60" th:inline="text">[[${dto.content}]]</textarea>
					</td>
				</tr>
				<tr>
					<td colspan="2" align="center">
						<input type="hidden" name="idx" th:value="${dto.idx}" />
						<input type="button" value="수정" id="btnUpdate" />
						<input type="button" value="삭제" id="btnDelete" />
					</td>
				</tr>
			</table>
		</form>
		-----------------------------------------------------------------------------------------------------
		> th:value : 전달받은 값을 input tag에 표시
		> th:inline="text" + [[${}]] : 전달받은 값(${}안의 값)을 tag사이에 text로 표시
		> textarea에는 value 속성이 없다.

  6> 수정/삭제 기능
  	- 비밀번호를 확인하고 넘어가도록 수정필요.
  	- detail.html에 script추가
  	- controller : update.do, delete.do
  		------------------------------------------------------------------------------------------------------
		@RequestMapping("update.do")
		public String update(@ModelAttribute GuestbookDTO dto) {
			guestbookService.update(dto);	//레코드 수정
			return "redirect:/list.do";		//목록으로 이동
		}
	
		@RequestMapping("delete.do")
		public String delete(@RequestParam int idx) {
			guestbookService.delete(idx);	//레코드 삭제
			return "redirect:/list.do";		//목록으로 이동
		}
  		------------------------------------------------------------------------------------------------------
  		> @ModelAttribute : 생략가능
  			- 파라미터로 넘겨 준 타입의 오브젝트를 자동으로 생성한다. 
         	- 이때 @ModelAttribute가 지정되는 클래스는 beans 클래스라야 한다.
			- 그리고 getter와 setter가 명명 규칙에 맞게 만들어져 있어야 한다.
			- 생성된 오브젝트에(info) HTTP로 넘어 온 값들을 자동으로 바인딩한다. 
			- url요청으로 넘어오는 값을 해당 DTO setter를 통해서 해당 멤버 변수에로 binding된다.
			- @ModelAttribute 어노테이션이 붙은 객체가 자동으로 Model 객체에 추가되고 .jsp 뷰단까지 전달된다.
			- 이상의 과정은 spring framework가 내부적으로 처리한다.

  		> @RequestParam	: 생략가능, 하나이상 파라미터에서 사용가능. DefaultValue설정으로 null값 오류 방지(4**)
  		
	- service : dao 호출, 매개값을 넘겨준다
	- DAO : 메서드, 쿼리 작성
		------------------------------------------------------------------------------------------------------
		@Update("update guestbook set name=#{name}, email=#{email}, content=#{content} where idx=#{idx}")
		public void update(GuestbookDTO dto);
		
		@Delete("delete from guestbook where idx=#{idx}")
		public void delete(int idx);
		------------------------------------------------------------------------------------------------------

lec 22 종료.
lec 23~24 : 20,21,22와 중복내용




