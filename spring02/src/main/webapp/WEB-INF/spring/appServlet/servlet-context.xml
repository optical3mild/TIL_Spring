<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
<!-- 리소스 파일 경로설정 ( 리소스 매핑 ) : jsp, servlet이 아닌 정적인 요소들의 경로설정. -->
	<resources mapping="/resources/**" location="/resources/" />	
	<!-- mapping="리소스의 가상 url" location="리소스의 실제경로" -->
	<resources mapping="/include/**" location="/WEB-INF/views/include/" />
	<resources mapping="/images/**" location="/WEB-INF/views/images/" />
	<resources mapping="/json/**" location="/WEB-INF/views/json/" />
	<resources mapping="/ckeditor/**" location="/WEB-INF/views/ckeditor/" />
	<resources mapping="/summernote/**" location="/WEB-INF/views/summernote/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<!-- 스프링 빈을 태그로 등록하지 않고 자동으로 검색(auto scan) --> 
	<context:component-scan base-package="com.example.spring02" />
	
	<!-- 주의: 아래와 같이 입력하면 해당패키지의 하위 패키지 내에서만 검색하므로, 해당패키지에 바로 포함된 클래스들은 무시된다. -->
	<!-- <context:component-scan base-package="com.example.spring02.*" />  -->

<!-- 파일업로드 관련설정 -->
	<!-- 파일 업로드에 필요한 bean -->
  	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
  		<!-- 파일업로드 최대 용량 (byte단위) -->
  		<beans:property name="maxUploadSize" value="104857600" />
  	</beans:bean>
  	
  	<!-- 파일 업로드를 위한 디렉토리 설정 -->
  	<!-- String uploadPath=new String("d:/upload"); -->
  	<beans:bean id="uploadPath" class="java.lang.String">
  		<beans:constructor-arg value="d:/uploadTest" />
  	</beans:bean>
  	
  	<!-- aop의 설정으로 proxy객체를 자동으로 생성 -->
  	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
  	
<!-- 인터셉터 빈을 등록 : class에 전체경로 작성, id는 이 bean을 참조할 변수명 --> 
	<beans:bean id="sampleInterceptor" class="com.example.spring02.interceptor.SampleInterceptor"></beans:bean>
	<beans:bean id="loginInterceptor" class="com.example.spring02.interceptor.LoginInterceptor"></beans:bean>
	<beans:bean id="adminInterceptor" class="com.example.spring02.interceptor.AdminInterceptor"></beans:bean>

<!-- 인터셉터 호출을 위한 url mapping -->
	<!-- beans:ref bean="참조할 bean의 id" -->
	<interceptors>
	
		<interceptor>
			<mapping path="/shop/**" />
			<beans:ref bean="sampleInterceptor" />
		</interceptor>
		
		<interceptor>
			<mapping path="/shop/cart/list.do" />
			<mapping path="/shop/cart/insert.do" />
			<beans:ref bean="loginInterceptor" />
		</interceptor>
		
		<interceptor>
			<mapping path="/shop/product/write.do" />
			<mapping path="/shop/product/insert.do" />
			<mapping path="/pdf/list.do" />	
			<mapping path="/chart/**" />	
			<mapping path="/jchart/**" />	
			<beans:ref bean="adminInterceptor" />
		</interceptor>
		
	</interceptors>
	
</beans:beans>
