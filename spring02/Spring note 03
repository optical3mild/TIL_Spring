lec05 1:20:00 ~

** project 배포 테스트 : lec05 1:23:00 ~ 1:32:00 =======================================================================
	- project 우클릭 -> export -> war 선택.
		> war 파일이 생성될 위치를 선택하고 옵션 선택
		> source file이 포함되지 않도록 할 것 : 배포시에는 컴파일된 class file만 포함될 뿐 source file은 배포하지 않는다.
		> war파일로 서버에 배포될 때에는 maven project구조가 아니라 dynamic web project 구조로 서비스가 올라감.
		> war file을 설치된tomcat/webapps/ 로 이동.
		> cmd로 tomcat 실행.
			- tomcat의 bin폴더로 이동, startup.bat을 실행하면 서버가 올라가면서 war file을 풀어 로드.
		> 서버가 오류없이 올라가면 localhost/spring01입력
			- 접속되지 않는다면 port번호를 입력하여 다시 실행해 볼것.
		> warfile을 복사하였던 폴더에 압출이 풀려있고, 폴더가 생성되어 있음
		> spring01 프로젝트 폴더 구조 확인 : WEB-INF에 개발한 정보들이 모두 들어가 있음을 확인할 수 있다.
		> WEB-INF/lib : jar files - 배포될 때는 maven에 작성하였던 해당 라이브러리 파일들이 실제로 포함되어 배포됨.
		
		--> 개발한 프로젝트 폴더 구조에서 webapp폴더가 배포되었음.
========================================================================================================================

3. MyBatis mapper interface
 
1> mybatis에서 sql query를 작성하는 방법 2가지
 1) mapper xml 파일에 작성 : 3개의 파일을 작성.
 	- MemoDAO.java (인터페이스)
 	- MemoDAOImpl.java (구현클래스)
 	- memoMapper.xml (mapper)
 2) mapper interface에 작성 : 보다 간편
 	- MemoDAO.java : 인터페이스 하나에 sql포함시켜 파일 하나에 처리가능.
 		
2> spring02 프로젝트 생성 : mapper interface로 sql query작성하는 예제.
	- Spring Legacy Project -> Spring MVC project
		> 프로젝트 생성 시 top level package name을 반드시 3 level로 작성할 것. ( com.example.spring02 )
 	- sample 프로젝트에서 설정파일 복사
 		> pom.xml
 		> resources 디렉토리 : memoMapper.xml 제외.
 		> WEB-INF 디렉토리 : servlet-context, root-context, web.xml
			- servlet-context : base-package 설정 변경 (com.example.spring02로 해당 프로젝트의 top level package로 변경)
			- root-context : DB연결정보 변경.( property - url, username, password )
	- project의 버전 설정
		> 설정파일에 맞게 조정 : java Build path, java Compiler, project Facets 등에서 버전 조정.

2> 실습예제 - 메모장
 1) 메모장 테이블
  Oracle =============================================================================================================
 	create table memo (
 		idx number not null primary key,
 		writer varchar2(50) not null,
 		memo varchar2(200) not null,
 		post_date date default sysdate
 	);
 	
 	insert into memo (idx,writer,memo) values (1,'kim', '첫번째 메모');
 	insert into memo (idx,writer,memo) values (2,'park', '두번째 메모');

/* lec 05에서는 실행 x	
>> 	delete from memo;
>> 	-- nvl(A,B) A가 null이면 B
>> 	select nvl(max(idx)+1,1) from memo;
 	
>> 	insert into memo (idx,writer,memo) 
 		values ((select nvl(max(idx)+1,1 from memo),'park', '두번째 메모');
 */
 ========================================================================================================================
 
  MySql ===============================================================================================================
	- varchar2 없음, sysdate는 now()로 date는 datetime(시간을 포함한 날짜)로 변경. 
 	create table memo (
 		idx number not null primary key,
 		writer varchar(50) not null,
 		memo varchar(200) not null,
 		post_date datetime default now()
 	);
 
 	insert into memo (idx,writer,memo) values (1,'kim', '첫번째 메모');
 	insert into memo (idx,writer,memo) values (2,'park', '두번째 메모');
 
========================================================================================================================= 
 
lec06~ 
 2) root-context.xml에 코드 추가
	----------------------------------------------------------------------------------------------------
	<?xml version="1.0" encoding="UTF-8"?>
	 
	//중략
	<!-- MyBatis mapper interface bean을 자동으로 검색하여 생성함. -->
		<mybatis-spring:scan base-package="com.example.spring02.model.memo"/>
	
	</beans> 
	---------------------------------------------------------------------------------------------------
 	- "mybatis-spring:scan" : mybatis와 spring 연동기능. base-package기준으로 scan.
 
 3) package추가, class 작성	
 	1> top level package(com.example.spring02)하위에 미리 여러개의 package작성
 		> controller -> memo -->> com.example.spring02.controller.memo
 		> model -> memo -> dao, dto
 							-->> com.example.spring02.model.memo.dao
 							-->> com.example.spring02.model.memo.dto
 		> service -> memo -->> com.example.spring02.service.memo
 		> 추후 memo패키지와 동일 레벨에 product등의 기능별 패키지가 추가된다.
 	
 	2> MemoDTO작성 (model.memo.dto)
 	3> MemoDAO작성 (model.memo.dao, 인터페이스)
 		- MemoController --> MemoService(인터페이스) --> MemoServiceImpl(구현클래스) --> MemoDAO(인터페이스)
 			> Mapper.xml에 설정하는 방법과 달리, MemoDAO의 구현클래스와 mapper는 생성하지 않음.
 			> 위의 흐름대로 실행되며, 바로 view로 연결됨.
 			> MemoDAO인터페이스에 list()메소드가 완성되지 않았으나 
 				@Select 어노테이션과 sql문의 조합으로 sql이 실행되고 리턴값을 자동으로 만들어 리턴
 				-----------------------------------------------------------------------------------
 				@Select("select * from memo order by idx desc")
				public List<MemoDTO> list();
 				----------------------------------------------------------------------------------
 			--> DAO, DAOImpl, mapper.xml이 DAO에 합쳐진 기능. 코드도 축약됨.
 			--> root-context.xml의 <mybatis-spring:scan >의 base-package로 등록된 패키지 이하에 존재하는 클래스들만 가능.
 
 	4> MemoService, MemoServiceImpl 작성 (service.memo)
 		- spring에서는 controller, service, model(dao)는 spring에 제어권을 넘김. 어노테이션으로 각각의 클래스들을 표시.
 			> Controller : @Controller, @RestController(json으로 리턴할 때)
 			> Service : @Service
 			> Model : @Repository
 		- Service에서는 dao를 호출. 변수만 선언하면 null값이 되므로, @Inject를 이용하여 객체를 주입
 			> 의존관계 주입(스프링에서 인스턴스 생성)
 		- 원하는 method작성 ( 리턴으로 dao의 메소드 호출결과를 보냄 )
 
 	5> MemoController 작성
 		- @Controller
		- @RequestMapping("memo/*")
			> 공통적인 url패턴 - 공통패턴과 메소드별 세부 패턴으로 나누어 작성할 수 있다.
			> 세부적인 url패턴 - 해당 메소드 위에 공통패턴 이후의 패턴을 작성. @RequestMapping("list.do")
		- controller에서는 서비스 인스턴스를 호출 : 의존관계 주입 (@Inject MemoService memoService;)
		- ModelAndView : model과 view의 정보를 같이 가지고 있는 클래스
			> 리턴타입 String으로 포워딩할 경로를 지정하고, Model객체에 data를 저장하여 처리하는 방식대신에 사용.
			 ---String과 model을 이용한 경우-----------------------------------------------------------------------
			 @RequestMapping("list.do")
			 public String list(Model model) {
			 	List<MemoDTO> items = memoService.list();
			 	model.addAttribute("list", items)
			 	return "memo/memo_list";
			 }
			 ------------------------------------------------------------------------------------------------------
			
			> modelandview를 선언하고 메소드를 이용하여 저장, 리턴
			---ModelAndView를 이용한 경우--------------------------------------------------------------------------
			@RequestMapping("list.do")
			public ModelAndView list(ModelAndView mav) {
				List<MemoDTO> items = memoService.list();
				// servlet-context에 저장된 접두사, 접미사를 이용하여 전체경로가 완성됨.
				mav.setViewName("memo/memo_list"); // 포워딩할 view의 이름
				mav.addObject("list", items); // 전달할 데이터
				return mav;
			}
			------------------------------------------------------------------------------------------------------
		
		- ModelAndView를 이용한 축약코드
			> 리턴에 modelandview를 저장할 값과 함께 생성하여 리턴.
			------------------------------------------------------------------------------------------------------
			@RequestMapping("list.do") // 세부적인 url pattern
			public ModelAndView list() {
				List<MemoDTO> items = memoService.list();
				return new ModelAndView("memo/memo_list", "list", items);
			}
 			-----------------------------------------------------------------------------------------------------
 	
 	6> include 폴더 생성
 		> style.css, header.jsp, menu.jsp 작성.
 	
 	7> memo_list.jsp 작성
 		> spring02 에서 만들어지는 jsp파일에 공통적으로 include되는 파일들을 spring 설정에 setting하여 새 페이지에 모두적용.
 			- window --> preference --> web --> jsp files --> editor --> templates 에서 new jsp로 실행되는 template수정.
 				------------------------------------------------------------------------------------------------
 				<%@ page language="java" contentType="text/html; charset=${encoding}" pageEncoding="${encoding}"%>
				<!DOCTYPE html>
				<html>
				<head>
					<meta charset="${encoding}">
					<title>Insert title here</title>
					
					<!-- spring02 project header -->
					<%@ include file="../include/header.jsp" %>
				
				</head>
				<body>
				
					<!-- spring02 project menu -->
					<%@ include file="../include/menu.jsp" %>
				
					${cursor}
				</body>
				</html>
 				--------------------------------------------------------------------------------------------------
	
	** 보충설명==============================================================================================================
	 1) root-context.xml : 서블릿 이외의 설정들
	 2) servlet-context.xml : 서블릿(웹 서비스)에 관련된 설정들
	 	> <annotation-driven /> : 어노테이션을 가지고 객체를 생성하게 하는 옵션태그.
	 	> base-package 설정 시 주의 
	 		- 아래와 같이 입력하면 해당패키지의 하위 패키지 내에서만 검색하므로, 해당패키지에 바로 포함된 클래스들은 무시된다
				<context:component-scan base-package="com.example.spring02.*" />
 
 	 3) 요청에 따른 처리
 	 	> 정적인 컨텐츠(html, css, js, png, gif)/ 동적인 컨텐츠(jsp, 서블릿 : 코드가 실행되어 html이 출력)
 	 	> .html : 가공할 필요 없음(서블릿을 거쳐가지 않음.) 서버에서 html을 만들어 클라이언트에 전송.
 	 	> .jsp : JspServelt이 처리 --> html로 만들어 보냄.
 	 	> 서블릿 : DefaultServlet(tomcat default) - > Spring에서 재설정 - > DispatcherServlet이 처리 --> html로 만들어 보냄.
 		> .css, .js, .png등등 : html, jsp요청 외에는 전부 서블릿으로 인식됨.
 			- 정적인 요소(고정적요소)이므로 리소스로 처리 : servlet-context에 <resources>를 사용하여 경로 매핑.
 				ex) <resources mapping="/include/**" location="/WEB-INF/views/include/" />
 	==========================================================================================================================	
 
 	8> home.jsp 수정
 		> 한글설정 : page 지시어 태그와 meta태그를 삽입하면 UTF-8로 설정되어 한글폰트가 출력된다.
		> header, menu include : 경로에 주의. home.jsp는 include폴더와 동일폴더에 위치한다.

 4) 글쓰기 기능 구현
	- memo_list.jsp 수정
		> form으로 입력칸 작성
	- Controller 작성 : memoService를 호출하여 메소드 실행.
		===================================================================================================
		@RequestMapping("insert.do")	
			public String insert(@ModelAttribute MemoDTO dto) {
			memoService.insert(dto);
			return "redirect:/memo/list.do";
		}
		===================================================================================================
		> @ModelAttribute : form에서 전달한 값을 받아 자동으로 dto를 생성하고 받은 값을 저장. 생략가능.
	
	- Model(DAO 인터페이스) 작성
		===================================================================================================
		@Insert("insert into memo (idx,writer,memo) values"
					+ "((select ifnull(max(idx)+1,1) from memo a)" + ", #{writer}, #{memo}")
		public void insert(@Param("writer") String writer, @Param("memo") String memo);
		==================================================================================================
		> mybatis query에 전달할 변수는 @Param으로 처리
		> nvl() : oracle 함수 / coalesce() : 모든 데이터베이스에서 사용 / ifnull() : mysql에서 사용.
		> sql문의 변수명과 @Param("변수명")으로 표시된 변수명이 동일하여야 값이 전달됨.
		> 작성된 메서드는 서비스에서 호출되며, 전달된 매개변수의 값을 sql문에 적용하여 DB에 쿼리가 실행된다.
		> mysql의 서브쿼리의 테이블과 메인쿼리의 작업테이블이 동일할 때, 오류발생. --> 서브쿼리의 테이블에 별칭을 붙여주면 작동.
		
	- Service 작성
		> dao를 호출, 컨트롤러에서 전달받은 dto에서 getter로 dao에 전달할 필드값을 추출하여 메소드 실행.

 5) 글 상세화면 구현과 수정/삭제기능 : REST방식.
	- memo_list.jsp 수정 : 메모에 hyperlink 작업. href로 연결하지 않고, js로 글 번호를 넘기도록 이벤트 등록.
		---------------------------------------------------------------------------------------------------
		<script>
		// hyperlink 클릭시 http://localhost/spring02/memo/view/글번호 로 이동.
			function memo_view(idx) {
				location.href="${path}/memo/view/"+idx;
			}
		</script>
		--------------------------------------------------------------------------------------------------
		> 파라미터 형태로 서블릿 요청 : http://localhost/spring02/memo/view.do?idx=글번호
		> 고유주소 형태로 서블릿 요청 : http://localhost/spring02/memo/view/글번호 - REST, RESTful한 uri.
			- REST(	REpresentativ State Transfer ): 게시물별로 고유한 주소값을 가짐.
			- 파라미터로 전달하는 대신, 전달받은 값을 주소로 처리하기 위해 컨트롤러에서는 @PathVariable을 사용.
	
	- 컨트롤러에 view()메소드 추가 : @PathVariable로 변화하는 url을 받아 변수로 전달.
		---------------------------------------------------------------------------------------------------
		// 글번호가 PathVariable로 url에 포함되어 전달됨.
		@RequestMapping("view/{idx}")
		public ModelAndView view(@PathVariable int idx, ModelAndView mav) {
			// 포워딩할 뷰의 이름
			mav.setViewName("memo/view");
			// 전달할 데이터
			mav.addObject("dto", memoService.memo_view(idx));
			return mav;
		}
		---------------------------------------------------------------------------------------------------
		> @PathVariable로 지정한 매개변수의 값은 전달된 url의 형식으로 지정된 {}안의 값을 참조하여 가져오게 된다.
		> 서비스를 호출하여 매개변수 값을 던지고, 결과를 받아 modelandview객체에 저장하여 값과 함께 지정경로로 포워딩.
		
	- DAO에 memo_view() 메소드 추가.
		---------------------------------------------------------------------------------------------------
		@Select("select * from memo where idx=#{idx}")
		public MemoDTO memo_view(@Param("idx") int idx);
		---------------------------------------------------------------------------------------------------
		
** 개발과정의 예 ======================================================================================================
- 개발단계로 들어가 코드를 작성하기 전, 설계단계가 있음
	> 화면설계, db설계 진행
	> 화면설계 : 화면의 요소 구성, 어떻게 주소가 요청되면 해당 화면이 나올지 설계서에 기술되어 있음.
	> 화면설계 기술을 바탕으로 어느부분부터 코드를 작성할 지 계획. ( DAO부터 작성할 지, Controller부터 작성할지..등등)
		- ex) MemoController --> MemoService --> MemoServiceImpl --> MemoDAO 순서대로 작성한다...
		- 보통 view와 controller등으로 업무를 분배하기 어려우므로, 작은 작업의 경우 기능을 통채로 개발.
			> MemoDAO를 개발 : 한명이 전체를 작성.
=======================================================================================================================
	
	- Service에 memo_view() 메소드 추가.
		> service는 dao를 호출하여 값을 전달하고 결과를 리턴받아 리턴한다.
	
	- view.jsp 작성 : 수정/삭제기능.
		> view를 작성하고, 버튼기능을 jquery로 작성. RESTful한 경로로 url을 만들어 요청을 보내도록 한다.
			-----------------------------------------------------------------------------------------------
			<script>
				$(function(){
					$("#btnUpdate").click(function(){
						document.form1.action="${path}/memo/update/${dto.idx}";
						document.form1.submit();
					});
					$("#btnDelete").click(function(){
						if(confirm("삭제하시겠습니까?")) {
							document.form1.action="${path}/memo/delete/${dto.idx}";
							document.form1.submit();
						}
					})
				})
			</script>
			-----------------------------------------------------------------------------------------------
		> update기능
			- Controller에 update()메소드 추가.
				> @ModelAttribute : form에서 전달한 값을 받아 자동으로 dto를 생성하고 받은 값을 저장. 생략가능.
				> 서비스 호출, @ModelAttribute로 받은 값을 메소드로 넘김.
				> 실행 후에는 목록으로 리다이렉트.
			- DAO에 update() 추가.
				--------------------------------------------------------------------------------------------------
				// 개별적인 @Param 대신 dto로 묶어서 전달할 수 있음 : dto안에 변수명이 {}안과 동일하여야 한다.
				@Update("update memo set writer=#{writer}, memo=#{memo} where idx=#{idx}")
				public void update(MemoDTO dto);
				--------------------------------------------------------------------------------------------------
			- Service에 update()추가.
				> dao를 호출하여 값을 전달, 메소드 실행.
		> delete기능
			- Controller에 delete()메소드 추가.
				> @PathVariable로 지정한 매개변수의 값은 전달된 url의 형식으로 지정된 {}안의 값을 참조하여 가져오게 된다.
				> 실행 후에는 목록으로 리다이렉트.
			- DAO에 delete() 추가.
				--------------------------------------------------------------------------------------------------
				@Delete("delete from memo where idx=#{idx}")
				public void delete(@Param("idx") int idx);
				--------------------------------------------------------------------------------------------------
			- Service에 delete()추가.
				> dao를 호출하여 값을 전달, 메소드 실행.

 lec 06 1:27:00 3.완료.














	