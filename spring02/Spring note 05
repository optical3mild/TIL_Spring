lec09 57:00

5. 관리자 기능
 1) 상품등록, 수정, 삭제 실습예제
	1> 관리자 테이블 : 관리자 계정과 일반유저 테이블을 따로 관리.
>> 		- 일반사용자와 관리자가 같은 테이블에 있는경우, 보안상 문제가 있을 수 있음. (**보안강화, 계정관리 방법?)		
 		Oracle ==================================================================================================
 		 drop table admin cascade constrains;
 		 create table admin (
 		 	userid varchar2(50) not null,
 		 	passwd varchar2(50) not null,
 		 	name varchar2(50) not null,
 		 	email varchar2(100),
 		 	join_date date default sysdate,
 		 	primary key(userid)
 		 );
 		 
 		 insert into admin (userid, passwd, name) values ('admin','1234''관리자');
 		 
 		 commit;
 		=========================================================================================================

 		MySql ===================================================================================================
		 * date --> datetime, sysdate --> now()
		 create table admin (
 		 	userid varchar(50) not null,
 		 	passwd varchar(50) not null,
 		 	name varchar(50) not null,
 		 	email varchar(100),
 		 	join_date datetime default now(),
 		 	primary key(userid)
 		 );
 		 
 		 insert into admin (userid, passwd, name) values ('admin','1234','관리자');
 		 
 		 -- query test.
 		 select name from admin where userid='admin' and passwd='1234'; //로그인 성공
 		 select name from admin where userid='admin' and passwd='1111';	//로그인 실패
 		=========================================================================================================
 	
 	2> admin 기능 기초구현
 		- 관리자 계정의 메뉴와 기능은 일반 유저와 분리.
 		- model
 			> com.example.spring02.model.admin 패키지에 dao생성. (**table구조가 동일하므로 DTO는 MemberDTO이용.)
			> adminMapper.xml생성 : 위치는 member나 다른 패키지에 넣어도 상관없으나, 따로 패키지를 만들어 생성함.
		- service
			> com.example.spring02.service.admin 패키지 아래 생성.
		- controller
			> com.example.spring02.controller.admin 패키지 아래 생성.
			> 관리자 로그인의 경우, 페이지에 명시적으로 표시(관리자 로그인 링크 등등)가 되면 보안상 문제가 발생.
			> 실제로는 사용자와 관리자의 최초 페이지를 다르게 할 것.

	3> 관리자 로그인
		- menu.jsp에 관리자 로그인 링크 생성(임시?)
		- views/admin/login.jsp생성
		- controller에 login_check()작성 
			> 사용자는 service에서 처리하였으나, controller에서 가능하므로 여기서는 controller에서 처리.
			> 관리자는 관리자메뉴와 일반사용자 메뉴 모두에 접근가능하도록 모든 세션변수 저장.
		- 관리자 페이지 생성 : admin.jsp
		- 관리자 메뉴 생성 : admin_menu.jsp
		- controller에 logout()작성
		
	4> 상품등록 기능
		- productController write() 작성.
		- product_write.jsp 생성
			> 파일첨부 기능
				- form에 속성필요 : method="post" enctype="multipart/form-data"
					> enctype="multipart/form-data" 
						- 파일을 잘게 쪼개어 부분부분 전송. 
						- 컨트롤러의 메소드가 실행될 때는 이미 파일이 임시디렉토리에 저장되어 있다.
				- servlet-context.xml에 파일 업로드 관련 설정 필요.
					> multipartResolver bean등록, 디렉토리 bean등록(-->코드로도 가능)
				 ============================================================================================
				  <!-- 파일업로드 관련설정 -->
				  
					<!-- 파일 업로드에 필요한 bean -->
				  	<beans:bean id="multipartResolver" 
				  			class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
				  		
				  		<!-- 파일업로드 최대 용량 (byte단위) -->
				  		<beans:property name="maxUploadSize" value="10485760" />
				  	
				  	</beans:bean>
				  	
				  	<!-- 파일 업로드를 위한 디렉토리 설정 -->
				  	<!-- String uploadPath=new String("d:/upload"); -->
				  	<beans:bean id="uploadPath" class="java.lang.String">
				  		<beans:constructor-arg value="d:/uploadTest" />
				  	</beans:bean>
				 ============================================================================================
			> 태그의 id, name
				- id : 중복x, document.getElementById("id") #id --> $("#id") js, jquery에서 참조
				- name : 중복o, document.getElementsByName("name") --> $(tag_name[name=name]) 자바코드에서 참조
			> 자바스크립트
				- 인터프리터(한 라인씩 실행) : 실행 중 에러가 발생하면 정지.
				- 자료형이 없음(가변자료형) : 우변의 값에 따라 자료형 결정.
				- 함수에도 리턴타입이 없음.
			> 문자열 비교
				- java : a.equals(b) a와 b의 내용이 같다. (*주의 a==b는 완전하게 비교되지 않는다.)
				- js : a == b로 비교.
			> return
				- return 값; : 함수를 종료 + 값을 되돌려줌
				- return; : 함수 종료
				
		- dto확인 : form의 태그 name과 dto의 필드이름이 일치하는지 확인.
		- **여러파일 첨부
			> 이름이 동일한 파일 업로드 태그를 여러개로 생성.
			> dto에서 array로 파일을 받음.
		- ProductController insert() 작성
			--------------------------------------------------------------------------------------------------
			** form의 속성 : method="post" enctype="multipart/form-data"
					> enctype="multipart/form-data" 
						- 파일을 잘게 쪼개어 부분부분 전송. 
						- 컨트롤러의 메소드가 실행될 때는 이미 파일이 임시디렉토리에 저장되어 있다.
			--------------------------------------------------------------------------------------------------
			> controller에서는 임시 디렉토리에 저장된 파일을 원하는 디렉토리로 옮김.
			> ** 디렉토리 구분자 : 윈도우즈= 역슬래시[\] , 유닉스(리눅스) = 슬래시[/]
			> ""안에서 \표시 --> "\\" : 정규표현식
				==============================================================================================
				* escape characters : \로 시작하는 문자들
					"\\" = \
					"\n" = new line (개행문자)
					"\t" = tab
					"\"" = "
				==============================================================================================
		- productService : dao호출, insertProduct(dto)작성
		- productDAO : sqlSession호출, 입력매개변수를 dto로 하는 insert()작성 --> insert("product.insert", dto)
		- productMapper : <insert> 작성
			> 서브쿼리 이용 - " select ifnull(max(product_id)+1,1) from product a "
			 : insert into product values 
				((select ifnull(max(product_id)+1,1) from product a),'사과', 1500, '사과... 맛나니?','apple.jpg');
		
		** =====================================================================================================
		 - 오라클에서 일련번호를 발급하는 방법
		 	1. 시퀀스
		 		시퀀스.nextval 다음번호
		 		시퀀스.currval 현재번호
		 	2. sub query
		 		select max(product_id)+1 from product --> 레코드가 0개이면 null
		 		select nvl(max(product_id)+1, 1) from product --> mysql에서는 nvl()이 없음 : ifnull()사용
		
		 - mysql, maria db : 명령어, 함수 동일. 시퀀스 없음. auto_increment사용.
		========================================================================================================

		** =====================================================================================================
		 - MyBatis 디버깅
			 
		











 		