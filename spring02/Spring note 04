lec06 1:27:00 ~

4. 상품관리
 1) 파일 업로드
 	- 일반적인 방식 : form을 사용.
 	- 비동기적인 방식(Ajax)

>> 파일업로드 코드 분석필요. 	
 2) 파일업로드 실습예제 : form을 이용한 방식의 업로드 적용.
  
  1> 파일 업로드를 위한 라이브러리 추가 : pom.xml에 업데이트 필요. jsp/spring에서는 fileupload기능이 없음.
  	---------------------------------------------------------------------------------------------------------------
  	<!-- 파일 업로드관련 라이브러리 : commons-fileupload -->
  	<!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
	<dependency>
	    <groupId>commons-fileupload</groupId>
	    <artifactId>commons-fileupload</artifactId>
	    <version>1.3.3</version>
	</dependency>
  	
  	** 다음단계에서 사용.
  	<!-- 이미지 썸네일을 만들어주는 라이브러리 : imgscalr-lib -->
  	<!-- https://mvnrepository.com/artifact/org.imgscalr/imgscalr-lib -->
	<dependency>
	    <groupId>org.imgscalr</groupId>
	    <artifactId>imgscalr-lib</artifactId>
	    <version>4.2</version>
	</dependency>
  	---------------------------------------------------------------------------------------------------------------
  	
  2> 파일 업로드를 위한 설정 : servlet-context.xml
  	---------------------------------------------------------------------------------------------------------------
  	<!-- 파일 업로드에 필요한 bean -->
  	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
  		<!-- 파일업로드 최대 용량 (byte단위) -->
  		<beans:property name="maxUploadSize" value="10485760" />
  	</beans:bean>
  	
  	<!-- 파일 업로드를 위한 디렉토리 설정 : 아래와 같이 자바코드로 설정 할 수도 있음. -->
  	<!-- String uploadPath=new String("d:/upload"); -->
  	<beans:bean id="uploadPath" class="java.lang.String">
  		<beans:constructor-arg value="d:/upload" />
  	</beans:bean>
  	---------------------------------------------------------------------------------------------------------------

>> 코드 작성방법, 내용은 강의에 없음. 분석필요.
  3> menu.jsp 수정.
  	<a href="${path}/upload/uploadForm">업로드테스트</a>
  	
  4> Controller 추가.
  	- controller.upload.UploadController 작성.
  	
  5> uploadForm.jsp / uploadResult.jsp 작성
	- 파일이 포함되지 않았을 경우, 다르게 출력되도록 설정필요.
<<

 3) 상품관리 실습예제
 	- 일반사용자 : 상품목록 보기, 장바구니 담기, 장바구니 보기
 	- 관리자 : 상품등록, 상품수정/삭제 (파일업로드 기능이 포함됨.)
 	
 	- 샘플상품 이미지 다운로드.
 	
  1> 상품 테이블
   Oracle ---------------------------------------------------------------------------------------------------
   -- clob : 최대 4G 입력가능, 한 테이블에서 여러 칼럼에 사용가능, 검색가능.
   -- long : 최대 2G 입력가능, 한 테이블에서 1개 컬럼만 사용가능, 검색불가.
   
	create table product (
		product_id number,
		product_name varchar2(50),
		price number default 0,
		description clob,
		picture_url varchar2(500),
		primary key(product_id)
	);
	
	select * from product where description like '%샘플%';
	
	insert into product values (1,'레몬',1500,'레몬에 포함된 구연산은 피로회복에 좋습니다.','lemon.jpg');
	insert into product values (2,'어륀지',2000,'비타민 C가 풍부합니다. 생과일 주스로 마셔.','orenge.jpg');
	insert into product values (3,'키위',3000,'비타민 C가 매우 풍부. 다이어트, 미용에 좋음.','kiwijpg');
	insert into product values (4,'포도',5000,'폴리페놀 많다. 항산화 작용한다.','grape.jpg');
	insert into product values (5,'딸기',8000,'비타민 C나 플라보노이드를 다량 함유.','strawberry.jpg');
	insert into product values (6,'귤',7000,'감기예방에 좋음','tangerine.jpg');
	
>>	-- 상품코드들 위한 시퀀스 생성 : mysql에서는 생성 시 auto_increament처리를 한다.
	drop sequence seq_product;
	create sequence seq_product;
	start with 10;
	increment by 1;
	
	insert into product values (seq_product.nextval,'사과', 1500, '사과... 맛나니?','apple.jpg');
	
	commit;
   
   ----------------------------------------------------------------------------------------------------------

   MySql ----------------------------------------------------------------------------------------------------
   -- clob : 최대 4G 입력가능, 한 테이블에서 여러 칼럼에 사용가능, 검색가능.
		> MySql에서는 clob이 없음 : 예측되지 않는 문자열은 text나 varchar로.
   -- long : 최대 2G 입력가능, 한 테이블에서 1개 컬럼만 사용가능, 검색불가.
   
	create table product (
		product_id int,
		product_name varchar(50),
		price int default 0,
		description text,
		picture_url varchar(500),
		primary key(product_id)
	);
	
	// select * from product where description like '%샘플%';
	
	-- 데이터 추가.
	// views/images에 jpg파일 저장.
	insert into product values (1,'레몬',1500,'레몬에 포함된 구연산은 피로회복에 좋습니다.','lemon.jpg');
	insert into product values (2,'어륀지',2000,'비타민 C가 풍부합니다. 생과일 주스로 마셔.','orange.jpg');
	insert into product values (3,'키위',3000,'비타민 C가 매우 풍부. 다이어트, 미용에 좋음.','kiwi.jpg');
	insert into product values (4,'포도',5000,'폴리페놀 많다. 항산화 작용한다.','grape.jpg');
	insert into product values (5,'딸기',8000,'비타민 C나 플라보노이드를 다량 함유.','strawberry.jpg');
	insert into product values (6,'귤',7000,'감기예방에 좋음','tangerine.jpg');
	
	-- auto_increment 설정 : oracle의 sequence설정을 대체. key 설정되어 있지 않으면 오류발생.
	alter table product modify product_id int not null auto_increment;
		예제)====================================================================================================
		//table 맨 앞줄에 시퀀스 컬럼생성
		alter table product add column seq_product int first;
		
		//생성되어 있는 컬럼에 auto_increment설정.
		alter table product modify seq_product int not null unique auto_increment;
		
		//생성하면서 auto_increment설정.
		alter table product add column seq_product int not null unique auto_increment first;
		=========================================================================================================
	
	-- seq_product.nextval 사용 불가.
		// insert into product values (seq_product.nextval,'사과', 1500, '사과... 맛나니?','apple.jpg');
		> 컬럼명을 명시하여 입력.
			: insert into product (product_name,price,description,picture_url)  
							values ('사과', 1500, '사과... 맛나니?','apple.jpg');
	
		> 서브쿼리 이용 - " select ifnull(max(product_id)+1,1) from product a "
			: insert into product values 
				((select ifnull(max(product_id)+1,1) from product a),'사과', 1500, '사과... 맛나니?','apple.jpg');
>> auto_increment 시작 숫자 설정방법?
   ----------------------------------------------------------------------------------------------------------------

lec07~

  2> model.shop.ProductDTO.java
 	- 필드에 private MultipartFile file1; 추가.
 	
  3> model.shop.ProductDAO.java (인터페이스)
  4> model.shop.ProductDAOImpl.java (구현클래스)
	- @Repository 어노테이션 작성 : dao bean으로 선언.
	- listProduct()작성.
		> 의존성 주입 : sqlSession
			- Mybatis로 sql을 실행하기 위해 필요.
			- root-context.xml에 선언되어 있는 sqlSession을 생성하여 연결시켜 줌.
		> return sqlSession.selectList("product.list_product");
			- mapper에 namespace가 product, id가 list_product인 sql문을 실행하여 리스트를 받아옴.
	
  5> shop 폴더안에 productMapper 생성, selectList작성.
	---------------------------------------------------------------------------------------------------------
	<mapper namespace="product">
		<select id="list_product" resultType="com.example.spring02.model.shop.dto.ProductDTO">
			select * from product order by product_name //semi colon 입력하지 말것.
		</select>
	</mapper>
	---------------------------------------------------------------------------------------------------------
	- dao에 작성한 namespace.id를 확인하여 일치하도록 작성.
	- resultType은 DTO의 경로를 정확히 입력.
	- sql문에 semi-colon 입력하지 말것.
		
  6> service 계층 생성
	- com.example.spring02.service.shop 패키지 생성
	- ProductService.java (인터페이스) 생성
	- ProductServiceImpl.java (구현클래스) 생성
		> @Service : service bean으로 등록.
		> list_product()작성 : dao호출하여 메소드 실행.
			- 의존성 주입 : productDao

  7> controller 작성.
 	- com.example.spring02.controller.shop 패키지 생성.
 	- ProductController.java 작성.
 		> @Controller : controller bean으로 등록.
 		> @RequestMapping : class 전체에 공통 url지정.
 		> @Inject : 서비스 객체 주입.
 		> list()작성
 			- @RequestMapping("list.do") : 공통 url뒤에 작성될 해당 요청의 url
 			- ModelAndView : setViewName(), addObject() 로 포워딩할 경로와 전달할 데이터를 저장하여 리턴(포워딩)
 			
 	============================================================================================================
 	* Spring이 관리해주는 bean 어노테이션 : @Controller, @Service, @Repository
   	* 경로 지정 어노테이션 : @RequestMapping. class와 method에 나누어 작성가능.
  	* 의존관계
 		> ProductController --> ProductService --> ProductDAO --> sqlSession
 		> @Inject를 해줌(DI) : 객체 관리권한이 spring으로 넘어감 (IoC).
	============================================================================================================

  8> product_list.jsp작성 :views/shop폴더를 생성하여 폴더안에 작성.
  9> menu추가 : 컨트롤러에서 지정하는 경로를 링크로 추가.

  10> 상세페이지 기능 구현
	- product_list.jsp에서 목록의 item당 hyperlink추가 : shop/product/detail/${}로 restful한 요청이 되도록 작성.
		> <a href="${path }/shop/product/detail/${row.product_id }">${row.product_name }</a>
	- Controller : detail() 작성.
		> @PathVariable int product_id 
			- @RequestMapping("detail/{product_id}")에서 {}에 있는 값은 pathvariable임을 표시.
			- {}안의 변수명과 일치하여야 함. 
			- {}의 변수명과 어노테이션으로 표시된 변수명만 일치할 뿐, 뷰에서 넘어오는 파라메터의 이름과는 상관없음.
			- {}안의 값을 매개변수로 전달받아 코드를 실행.
		> productService.detailProduct(product_id)를 호출하여 리턴값을 받아 경로와 함께 modelandview에 저장하여 리턴.
			--> 저장된 경로로 포워딩된다.
	- Service : detailProduct() 작성
		> productDao.detailProduct(product_id)를 호출하여 리턴값을 받아 컨트롤러로 리턴함.
	- DAO : detailProduct() 작성
		> sqlSession을 호출하고, 하나의 레코드만 검색하므로 selectOne()을 사용한다.
		> mapper에서 작성할 <mapper>의 namespace, <select>의 id를 확인하고, 아래와 같이 ["namespace.id", 검색인자]형식으로 작성
		> sqlSession.selectOne("product.detail_product", product_id)를 실행하여 결과를 리턴함.
	- Mapper : <select id = "detail_product" resultType=""> 'sql문'</select>을 작성.
		----------------------------------------------------------------------------------------------------------
		<mapper namespace="product">
			//중략..
			<select id="detail_product" resultType="com.example.spring02.model.shop.dto.ProductDTO">
				select * from product where product_id=#{product_id}
			</select>
			
		</mapper>
		----------------------------------------------------------------------------------------------------------
		> DAO에서 selectOne의 매개변수로 전달받은 검색인자를 #{}로 받아 처리.
	- 상세페이지 : /shop/product_detail.jsp 작성.
	
  ** 장바구니 테이블 생성. --> 12> 장바구니 기능에서 다시.
  

lec 07 종료.

lec 08 ~
 11> 로그인 기능
 	- login.jsp 작성
	- MemberController 작성
		> Spring에서 관리 : @Contoller
		> member/login.do : 로그인 페이지로 이동
		> member/login_check.do : 로그인 실행
	- MemberDTO 작성
		> 테이블 작성
		MySql ==================================================================================================
		create table member (
	 		userid VARCHAR(50) not null primary key,
	 		passwd VARCHAR(50) not null,
	 		name VARCHAR(50) not null,
	 		email VARCHAR(50),
	 		join_data datetime DEFAULT NOW()
	 	);

		insert into member (userid, passwd, name, email) values ('kim', '1234', '김철수', 'kim@gmail.com');
 		========================================================================================================
	- 전체 흐름
		> MemberController( : @Controller) --> MemberService(+Impl : @Service) 
				--> MemberDAO(+Impl : @Repository) --> memberMapper.xml
	- MemberDAO, MemberDAOImpl
		> spring 에서 관리 : @Repository
		> MyBatis sqlSession 호출하여 쿼리 실행, 결과값을 받음
		> @Inject SqlSession : 의존관계 주입
		> 삼항연산자를 이용하여 리턴값이 null이면 false를 리턴, 다른 값이 들어오면 true를 리턴.
	- MemberService, MemberServiceImpl
		> spring 에서 관리 : @Service
		> DAO 호출하여 메소드 실행, 결과를 받아 controller로 리턴.
		> @Inject MemberDAO memberDao : 의존관계 주입.
		
	====정리===================================================================================================			
	 MemberController 	-->  MemberService	-->   MemberDAO		-->   memberMapper.xml
		@Controller				@Service			@Repository
		@Inject					@Inject				@Inject
		MemberService;			MemberDAO;			SqlSession;
	===========================================================================================================
		> 세션변수에 값 저장 : id, name
			- 1. DAO의 loginCheck method를 수정하여 이름을 리턴받는다. (현재 리턴값 true/false)
			- 2. 기능 추가.
				> MemberService에 method를 추가
				> MemberDAO에 동일 method를 추가
				> memberMapper에 query 추가
				> MemberServiceImpl의 login_check()에서 호출하여 해당 user의 이름을 리턴 받는다.
				> 리턴받은 값을 session에 저장하고, 앞서 받은 결과값인 result를 controller로 리턴.

	- MemberController의 login_check작성
		> @Inject MemberService memberService;
		> 서비스를 호출하여 결과값을 받는다 : loginCheck();
			- 결과값에 따라 페이지를 지정하고 값을 저장하여 포워딩 한다.

	- home.jsp에서 로그인 성공 시 보여줄 문구를 작성 : jstl, sessionScope
	
	====scope영역===============================================================================================
	  현재		 요청+응답		사용자			서버단위		에 저장.
	 pageScope < requestScope < sessionScope < applicationScope
	
	--> 각 영역에 단일한 변수로 저장됨.
	============================================================================================================

	- menu.jsp 수정.
		> 로그인 링크를 jstl <c:choose>, <c:otherwise>, <c:when>을 이용하여 수정.
	- Controller 수정.
		> logout.do : logout()추가.
			- 세션 초기화 작업 필요 : 서비스를 호출하여 logout(session)실행.
			- 세션 초기화는 session.invalidate()로 할 수 있으나, 전체적인 구조를 지키기 위해 서비스로 넘김.
	- login.jsp 수정.
		> <c:if>로 로그아웃이후 표시할 내용을 나타냄.

 13> 장바구니 기능 기초작업, 목록출력 기능.
 	- 장바구니 테이블 생성
	 	Oracle ======================================================================================================
		  	create table cart (
		  		cart_id number not null primary key,
		  		userid varchar2(50) not null,
		  		product_id number not null,
		  		amount number default 0
		  	);
	
			-- userid 컬럼에 foreign key 설정
			alter table cart add constraint cart_userid_fk foreign key(userid) references member(userid);
			-- 제약조건 삭제
			alter table cart drop constraint cart_productid_fk;
		=============================================================================================================
		
		MySql =======================================================================================================
			** spring 01 project의 member table을 사용.
			
			create table cart (
		  		cart_id int not null primary key,
		  		userid varchar(50) not null,
		  		product_id int not null,
		  		amount int default 0
		  	);
			
			** 외래키 추가 : cart-member/ cart-product
			 - userid 컬럼에 foreign key 설정
				alter table cart add constraint cart_userid_fk foreign key(userid) references member(userid);
			 - product_id 컬럼에 foreign key 설정
				alter table cart add constraint cart_productid_fk foreign key(product_id) references product(product_id);
			** 제약조건(외래키) 삭제
				// alter table cart drop constraint cart_productid_fk; --> oracle
				alter table cart drop foreign key cart_productid_fk; --> 인덱스 남음.
			
			- auto increment설정
			alter table cart modify cart_id int not null auto_increment;

			- 더미데이터	
			insert into cart (userid,product_id,amount) values ('kim',1,10);
		============================================================================================================
		> userid 컬럼에 foreign key 설정
			- alter table 테이블 foreign key(컬럼) references 테이블(컬럼)
			- alter table cart add constraint cart_userid_fk foreign key(userid) references member(userid);
				> member 테이블의 userid에 있는 값만 참조하여 저장됨. 그 외에는 불가.
			- cart_userid_fk 
				> "테이블_컬럼_키의 약자" 형식으로 지정. 
				> cart 테이블의 userid 컬럼에 foreign key 제약조건을 설정한것을 알 수 있음.
				> 데이터 무결성 유지 : 이후 join을 수행 할 때, 각 테이블에서 연결할 컬럼의 필드가 일치하도록 만듬.

	- 기본 package : ~.shop이용.
	- 전체 흐름 : CartController --> CartService --> CartDAO --> cartMapper.xml
	- CartDTO 작성 : 추후 join할 것을 고려하여 필드 작성.
	- CartDAO, CartDAOImpl 작성
		> @Repository (= @Component: 구버전) : spring에서 관리하는 bean으로 등록
		> @Inject SqlSession : mybatis sql실행객체
		> listCart() 작성
			- sqlSession.selectList("cart.listCart", userid);
				> userid를 받아 sqlSession의 selectList()실행. 
				> mapper의 namespace가 cart, id가 listCart인 select태그에 있는 sql에 userid를 전달하여 쿼리를 실행.
	- cartMapper.xml 작성
		> 3개의 table을 join
			- 김철수라는 사람이 레몬 10개를 장바구니에 등록한 것을 조회 : 김철수, 레몬, 10
				> SELECT cart_id, m.userid, m.name, p.product_id, product_name, amount, price, price*amount money 
						FROM member m, cart c, product p WHERE m.userid=c.userid and p.product_id=c.product_id;
				> price*amount money : alias 계산식. price*amount의 결과값을 money라는 컬럼 제목으로 출력.
				> m.userid : join한 테이블에 공통적으로 들어가 있는 컬럼의 경우, 어느 테이블의 이름인지 명확히 표시.		
			- 현재 로그인한 사람의 장바구니 출력
				> where절에 조건 추가 : and m.userid="아이디"
		> 매퍼는 업무단위별로 파일을 나누어 작성하는 것이 관리하기 편함 : cartMapper추가.
		> namespace를 cart로 변경하고 태그안에 id가 listCart인 select태그를 생성하고 sql문을 작성한다.
			--------------------------------------------------------------------------------------------------
			<mapper namespace="cart">
				<select id="listCart" resultType="com.example.spring02.model.shop.dto.CartDTO'>
					SELECT cart_id, m.userid, m.name, p.product_id, product_name, amount, price*amount money 
						FROM member m, cart c, product p 
						WHERE m.userid=c.userid AND p.product_id=c.product_id AND m.userid = #{userid}
				</select>
			</mapper>
			--------------------------------------------------------------------------------------------------
	- CartService, CartServiceImpl 작성
		> DAO와 동일한 명칭/기능의 메소드 생성
		> @Service : spring에서 관리하는 bean으로 등록
		> @Inject CartDAO cartDao : 의존관계 주입
		> listCart(String userid) : dao를 호출하여 매개변수로 값을 넘겨주고 메소드를 실행, 값을 리턴받아 컨트롤러로 전달.
	
	- menu.jsp에 장바구니 추가
		> 로그인을 해야 볼수 있도록 메뉴를 작성 : jstl <c:if>, sessionScope이용.

	- CartController 작성
		> @Controller : spring에서 관리하는 bean으로 등록
		> @Inject CartService cartService : cart서비스를 호출하여 메소드를 실행하고 리턴값을 받아 처리.
		> 장바구니 목록 출력 : list.do
			- 세션변수 확인 : 사용자 확인/로그인 여부 check를 위해 사용자 id를 session에서 확인
				> String userid = (String)session.getAttribute("userid");
			- 로그인한 경우
				> if(userid != null) : 서비스를 호출하여 목록을 받아옴.
				> 받아온 목록을 hashmap에 합쳐서 전송 : 보낼 자료가 많은 경우, put()으로 hashMap에 합쳐서 전송.
				> hashmap으로 묶어서 보내지 않는경우, mav에 따로따로 저장하여도 무방.
			- 로그인하지 않은 경우 userid <-- null
				> return new ModelAndView("member/login", "", null) : 빈값과 null을 전송.
		

	- cart_list.jsp 작성
		> 수정/삭제 기능을 위해서는 table의 기본키 값이 필요. 목록을 받아올 때 table의 기본키 값을 받아옴.
		> 받아온 값 중 필요하나 표시될 필요는 없는 경우, hidden으로 숨긴다. 

 14> 장바구니 등록기능
 	- product_detail.jsp 수정 : 장바구니에 넣기 버튼, 수량선택 삽입.
	- 장바구니에 넣기 버튼을 눌렀을 때 로그인 확인하여 로그인 되어있지 않으면 로그인 창으로 이동.
	- 장바구니 등록기능 : insert.do
		> 로그인이 되어있지 않은경우, 로그인 화면으로 이동.
		> 로그인 확인 후 insert처리, 장바구니 목록으로 이동.
	- Controller에 insert()추가.
		> 화면에서 넘어가는 값 : 선택된 물품 id, 수량을 컨트롤러에 넘김
		> 사용자 정보는 session에서 가져옴 (로그인이 되어있으므로)
		> @ModelAttribute : form에서 넘어온 값을 담는 변수로 설정.
			- form에서 넘어온 값을 각각 매개변수로 받아도 되지만, 한번에 넘겨 작업하므로 dto에 담아 처리한다.
		> session을 확인하여 userid변수가 존재하는지 확인하여 로그인 여부를 판별한다.
		> 로그인이 되어있으면 userid값을 dto에 저장한다.
		> 저장한 dto를 호출한 서비스 메소드의 매개변수로 넘겨 실행한 후 목록으로 리다이렉트 한다.
	- Service에 insert() 수정 : dao를 호출하여 값을 넘긴다.
	- DAO insert() 수정 : sqlSession을 호출하고 insert메소드를 실행하여 설정된 쿼리를 실행한다.
	- mapper에 <insert id="insert>추가작성
		> insert into cart(cart_id,userid,product_id,amount) 
			values ((select ifnull(max(idx)+1,1) from cart a), #{userid},#{product_id},#{amount})
			- cart_id는 auto_increment이므로, 확인하여 존재하는 값보다 1크게 들어가도록 한다.
			- 자동증가이므로, 위와 같이 서브쿼리를 넣어 작성하거나 대상항목 자체를 입력하지 않고 진행하여도 된다.
				> insert into cart(userid,product_id,amount) values (#{userid},#{product_id},#{amount})



































