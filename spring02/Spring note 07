lec 12 39:25 ~

8. AOP

 1) AOP의 개요
	1> AOP ( Aspect Oriented Programming, 관점(관심) 지향적인 프로그래밍)
		- OOP(Object Oriented Programming, 객체지향 프로그래밍)을 보완하는 확장적인 개념
		- Aspect(측면, 관점, 관심) : 핵심적인 비즈니스 로직은 아니지만 반드시 해야하는 작업들 (로그인/로그아웃..)
			> 대중교통으로 출퇴근 시 버스카드를 사용 - 정시에 도착하는 것이 중요, 카드사용행위가 메인은 아님.
		- 관심의 분리(Separation of Concerns)를 통해 
			핵심관점(= 종단관심 : 업무로직) + 횡단관점(트랜잭션, 로그인, 인증처리 등)으로 분리
			> 횡단관심을 모든 메소드에 작성하지 않고 한곳에 모아 작성하여 처리( 스프링에서 지원 )
		- 장점 : 중복되는 코드 제거, 효율적인 유지 보수, 높은 생산성, 재활용성 극대화, 변화수용의 용이성
		
		** =======================================================================================================
		절차 지향적인 프로그래밍 - C언어, 함수중심
			C : 함수, 구조체(다양한 타입의 변수들)
		객체 지향적인 프로그래밍
			C++ : 클래스(변수+함수)
			Java
		==========================================================================================================

 2) AOP의 주요 용어
 	- Aspect : 공통 관심사 (로깅, 보안, 트랜잭션 등) - 횡단관점의 업무
 	- Join Points : method를 호출하는 시점, 예외가 발생하는 시점 등과 같이 특정작업이 실행되는 시점을 의미함
 		> before, after, around(before + after)
 	- Advice : Join Points에서 실행되어야 하는 코드(실제로 AOP기능을 구현한 객체)
 	- Pointcuts : 실제로 Advice를 적용시킬 대상 method
 	- Proxy : Advice가 적용되었을 때 만들어지는 객체
 	
 3) Advice의 종류
 	- Before : target method 호출 전에 적용
 	- After : target method 호출 후에 적용
 	- Around : target method 호출 이전과 이후 모두 적용(가장 광범위하게 사용됨)

 4) AOP의 설정 방법
  1> pom.xml에 라이브러리 추가
  	- <properties>에 aspectj버전 태그 추가 : <org.aspectj-version>1.9.2</org.aspectj-version>
  	- 라이브러리 추가 : aspectjweaver 추가
		====================================================================================================
		<dependency>
		    <groupId>org.aspectj</groupId>
		    <artifactId>aspectjweaver</artifactId>
		    <!-- <version>1.9.2</version> -->
			<!-- version값을 properties에서 가져옴-->
			<version>${org.aspectj-version}</version>
		</dependency>
		====================================================================================================

  2> servlet-context.xml의 namespace에 aop와 tx(트랜잭션)추가
  	- 파일을 열고 source탭 옆의 namespace탭을 열어 aop와 tx부분을 추가
	- namespace탭에 설정한 내용은 source의 최상위 <beans:beans> 의 속성으로 각각 xmlns:aop, xmlns:tx 이다.
	- namespace에 지정: 관련 태그를 이용할 수 있음

  3> servlet-context.xml에 aop 태그 추가
  	--------------------------------------------------------------------------------------------------------
  	<!-- aop의 설정으로 proxy객체를 자동으로 생성 -->
  	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
  	--------------------------------------------------------------------------------------------------------
	- aop관련 코드를 읽어 자동으로 객체(인스턴스)로 만들어 주는 역할을 하는 태그
	- namespace에 속성지정이 되어있지 않으면 태그로 인한 에러발생.

  4> AOP기능을 지원하는 Advice 클래스 작성 - Logger
  	- 공통업무 : aop를 적용하여 메소드에서 일일이 하지 않고 공통적인 부분들은 한번에 처리 (세션체크, 로깅작업)
	- com.example.spring02.aop.LogAdvice.java : 로깅작업을 aop를 이용하여 적용
	  ====================================================================================================
		*어노테이션
		- @Controller, @Service, @Repository : controller, service, model(dao) bean
		- @Component : 범용적인 bean (@Repository대신에 사용가능)
		
		- @Aspect : 공통적인 업무를 지원하는 bean
		
		// 스프링에서 관리하는 bean으로 등록
		@Component
		// 공통적인 업무를 지원하는 bean
		@Aspect
		public class LogAdvice {
			
			// 로깅을 위한 변수
			private static final Logger logger = LoggerFactory.getLogger(LogAdvice.class);
			
			// 메서드가 실행되는 시점과 범위 정의
			@Around(
					"execution(* com.example.spring02.controller..*Controller.*(..))"
				+ " or execution(* com.example.spring02.service..*Impl.*(..))"
				+ " or execution(* com.example.spring02.model..dao.*Impl.*(..))"
			)
			public Object logPrint(ProceedingJoinPoint joinPoint) throws Throwable {
			// 핵심업무가 호출되기 전 실행 : before
				long start = System.currentTimeMillis(); // 시작시간측정
				
			// 핵심업무 실행
			// proceed()가 호출되는 시점을 기준으로 before after가 결정 : proceed()가 호출되면 핵심업무를 실행
				Object result = joinPoint.proceed();
				
			// 핵심업무가 종료되면 이하를 실행 : after
				String type = joinPoint.getSignature().getDeclaringTypeName(); // 호출한 클래스 이름
				String name = "";
				if(type.indexOf("Controller") > -1) {
					name = "Controller \t: ";
				} else if(type.indexOf("Service") > -1) {
					name = "ServiceImpl \t: ";
				} else if(type.indexOf("DAO") > -1) {
					name = "DaoImpl \t: ";
				}
				// 로그에 남김 : 호출한 클래스, method정보
				logger.info(name+type+"."+joinPoint.getSignature().getName()+"()");
				// method에 저장되는 매개변수
				logger.info(Arrays.toString(joinPoint.getArgs()));
				// 종료시간측정
				long end = System.currentTimeMillis();
				long time = end - start;
				logger.info("실행시간: "+time);
				return result;
			}
		}
	  ====================================================================================================
		> @Around("execution(범위지정-패키지/클래스/메소드)")
			- 메서드가 실행되는 시점과 범위 정의
				> .. : 모든 하위패키지
				> *Controller : Controller로 끝나는 모든 클래스
				> *(..) : 모든 메소드
				> 범위지정에 따라 선택된 메소드에 @Aspect 메소드 행번호에 표시된 화살표와 동일한 모양의 화살표가 표시됨
		> Object result = joinPoint.proceed(); : 핵심업무 실행
			- logPrint() 실행 (before) --> 핵심업무(메소드)실행(proceed()) --> logPrint() 실행 (after)
			- proceed()가 호출되는 시점을 기준으로 before/after가 결정, 전체 코드가 순차적으로 실행된다.
		
		
 5) AOP, 트랜잭션처리 예제
  1> AOP실습용 테이블
   ==== Oracle ==============================================================================================
	drop table tbl_user cascade constrains;
	
	create table tbl_user (
		userid varcher2(50) not null,
		upw varchar2(50) not null,
		uname varchar2(50) not null,
		upoint number default 0,
		primary key(userid)
	);
	
	create table tbl_message (
		mid number not null,
		targetid varchar2(50) not null,
		sender varchar2(50) not null,
		message varchar2(4000) not null,
		opendate date,
		senddate date default sysdate,
		primary key(mid)
	);
	
	-- 시퀀스 생성
	create sequence message_seq
	start with 1
	increment by 1;
	
	-- 제약조건 설정
	alter table tbl_message add constraint fk_usertarget foreign key (targetid) references tbl_user(userid);
	alter table tbl_message add constraint fk_usersender foreign key (sender) references tbl_user(userid);
	
	-- 사용자 추가
	insert into tbl_user (userid, upw, uname) values ('user00', 'user00', 'kim');
	insert into tbl_user (userid, upw, uname) values ('user01', 'user01', 'park');
	insert into tbl_user (userid, upw, uname) values ('user02', 'user02', 'hong');
	insert into tbl_user (userid, upw, uname) values ('user03', 'user03', 'choi');
	insert into tbl_user (userid, upw, uname) values ('user04', 'user04', 'lee');
	
	select * from tbl_user;
	
	-- user02가 user00에게 메시지를 전송
	insert into tbl_message(mid, targetid, sender, message) values (message_seq.nextval, 'user00', 'user02', '안녕');
	
	-- user02에게 포인트 10 추가
	update tbl_user set upoint=upoint+10 where userid='user02';
	
	-- user00의 메시지 박스 조회
	select * from tbl_message where targetid = 'user00';
	-- 메시지를 읽은 시각 수정
	update tbl_message set opendate = sysdate where mid = 1;
	select * from tbl_message;
	-- 메시지를 읽으면 5 포인트 증가
	update tbl_user set upoint=upoint+5 where userid = 'user00';
	select * from tbl_user;
	
	-- 메시지 테이블 초기화
	delete from tbl_message;
	-- 사용자 포인트 초기화
	update tbl_user set upoint = 0;
	
	commit;
   ==========================================================================================================
  
   ==== MySQL ==============================================================================================
	drop table tbl_user;
	
	create table tbl_user (
		userid varchar(50) not null primary key,
		upw varchar(50) not null,
		uname varchar(50) not null,
		upoint int default 0
	);
	
	* date --> datetime, sysdate --> now()
	create table tbl_message (
		mid int not null primary key auto_increment,
		targetid varchar(50) not null,
		sender varchar(50) not null,
		message varchar(4000) not null,
		opendate datetime,
		senddate datetime default now()
	);
	
	-- 시퀀스 생성 --> auto_increment 옵션
	
	-- 제약조건 설정 : 동일
	alter table tbl_message add constraint fk_usertarget foreign key (targetid) references tbl_user(userid);
	alter table tbl_message add constraint fk_usersender foreign key (sender) references tbl_user(userid);
	
	-- 사용자 추가 : 동일
	insert into tbl_user (userid, upw, uname) values ('user00', 'user00', 'kim');
	insert into tbl_user (userid, upw, uname) values ('user01', 'user01', 'park');
	insert into tbl_user (userid, upw, uname) values ('user02', 'user02', 'hong');
	insert into tbl_user (userid, upw, uname) values ('user03', 'user03', 'choi');
	insert into tbl_user (userid, upw, uname) values ('user04', 'user04', 'lee');
	
	select * from tbl_user;
	
	-- user02가 user00에게 메시지를 전송 
		: message_seq.nextval 사용불가 -> 서브쿼리 이용 - " select ifnull(max(product_id)+1,1) from product a "
	insert into tbl_message(mid, targetid, sender, message) 
			values ((select ifnull(max(mid)+1,1) from tbl_message a), 'user00', 'user02', '안녕');
	
	-- user02에게 포인트 10 추가
	update tbl_user set upoint=upoint+10 where userid='user02';
	
	-- user00의 메시지 박스 조회
	select * from tbl_message where targetid = 'user00';
	-- 메시지를 읽은 시각 수정
	update tbl_message set opendate = now() where mid = 1;
	select * from tbl_message;
	-- 메시지를 읽으면 5 포인트 증가
	update tbl_user set upoint=upoint+5 where userid = 'user00';
	select * from tbl_user;
	
	-- 메시지 테이블 초기화
	delete from tbl_message;
	-- 사용자 포인트 초기화
	update tbl_user set upoint = 0;
   ==========================================================================================================
	> 트랜잭션 : 전체 작업이 완료되어야 작업완료되어 결과가 저장(반영)됨. 
		- 글쓰기 + 포인트10 부여	/	글읽기 + 열람시간 수정 + 포인트5 부여  --> 도중 실패 시 롤백

  2> 기본 코드 작성
  	- com.example.spring02.model.message.dto : MessageDTO.java, UserDTO.java
  	- com.example.spring02.model.message.dao : MessageDAO.java, MessageDAOImpl.java - 메지시 읽기/쓰기/상태변경
  	- mappers.message : messageMapper.xml
  
  3> 메시지 보내기
  	- DAO create() : sqlSession호출, insert()실행
  		> * @Inject 두개이상 필요한 경우 - 각 변수선언마다 어노테이션 작성
	- mapper : <insert id="create"> - 메시지 전송 쿼리  	

>> lec13~
  4> 포인트 기능 : 트랜잭션(거래처리 단위) 처리, Advanced REST Client 사용(view가 없는 상태에서 테스트)
  	- 트랜잭션이 완료되지 않은 상태에서 에러가 발생할 경우, 데이터에 오류가 발생함. > 메시지 전달완료+포인트x
  	- root-context.xml(or servlet-context.xml)의 namespace탭에 tx체크 확인.(트랜잭션 설정)
  		> servlet-context.xml : 서블릿에 관련된 설정
  		> root-context.xml : 서블릿 이외의 설정 - DB연동 등...
  		> servlet-context.xml, root-context.xml을 합쳐도 상관 없음.
  		> servlet-context.xml에 체크 되어있지만, 트랜잭션은 DB연동과 관련이 있으므로 root-context.xml에 추가 설정한다. 
  		> root-context.xml에 트랜잭션관련 태그를 작성한다.
  			----------------------------------------------------------------------------------------------------
			>> 설정되어 있던 부분 : DB연동
			<!-- Root Context: defines shared resources visible to all other web components -->
			<bean id="dataSource"
				class="org.springframework.jdbc.datasource.DriverManagerDataSource">
				<!-- 드라이버 클래스 이름이 변경됨 -->
				<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
				
				<property name="url" value="jdbc:log4jdbc:mysql://localhost:3306/spring?characterEncoding=UTF-8&amp;serverTimezone=UTC" />
				
				<property name="username" value="spring" />
				<property name="password" value="1234" />
			</bean>
			<< 설정되어 있던부분
			
			<!-- 트랜잭션 관련 설정 -->
			<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
				<property name="dataSource" ref="dataSource" />
			</bean>
			<!-- 트랜잭션 관련 어노테이션을 자동인식하는 옵션 -->
			<tx:annotation-driven />
  			----------------------------------------------------------------------------------------------------
  			- <constructor-arg> : 생성자에 입력되는 매개변수
  			- <property> : 클래스의 멤버변수
  			- <property name="변수명" ref="다른 bean의 id" /> 
  				> 설정에서 ref와 bean의 id가 일치하는 태그를 찾아 변수값으로 전달
  				> 트랜잭션 설정을 자바코드로 변환
  					-------------------------------------------------------------------------------------------
					class DataSourceTransactionManager {
						@Inject
						DriverManagerDataSource dataSource; --> 변수명이 dataSource인 클래스를 주입
					}
  					-------------------------------------------------------------------------------------------
  				> DB연동부분을 자바코드로 변환
  					-------------------------------------------------------------------------------------------
					class DriverManagerDataSource {
						DriverSpy driverClassName;
						String url = "jdbc:log4jdbc:mysql://localhost:3306/spring?characterEncoding=UTF-8&amp;serverTimezone=UTC"
						String username = "spring";
						String password = "1234";
					}
  					-------------------------------------------------------------------------------------------

  	- com.example.spring02.model.massage.dao : PointDAO.java, PointDAOImpl.java - updatePoint() 
		=======================================================================================================
			@Repository
			public class PointDAOImpl implements PointDAO {
			
				@Inject
				SqlSession sqlSession;
				
				@Override
				public void updatePoint(String userid, int point) {
					Map<String, Object> map = new HashMap<>();
					map.put("userid", userid);
					map.put("point", point);
					
					// 2개 이상의 값을 전달할 경우 -> dto나 map을 사용
					sqlSession.update("point.updatePoint", map);
				}
			}
		=======================================================================================================
		> Map의 key는 쿼리의 파라미터와 같은 이름으로 한다.

	- pointMapper.xml
		=======================================================================================================
			<!-- sqlSession.update("point.updatePoint", map); -->
			<!-- map을 매개값으로 받아 쿼리에 값이 전달됨. parameter설정이 생략가능. -->
			<update id="updatePoint" parameterType="map">
				update tbl_user set upoint=upoint+#{point} where userid=#{userid};
			</update>
		=======================================================================================================
		> 여러개의 값을 전달받는 경우, map을 사용하여 넘어옴.
		> parameterType으로 넘어오는 매개값을 정의할 수 있으며, map의 경우 생략가능.
		> Map의 key는 쿼리의 파라미터와 같은 이름으로 되어있어야 한다.

	- com.example.spring02.service.message : MessageService.java, MessageServiceImpl.java - 메시지 추가/ 읽기
		> addMessage()
		======================================================================================================
		// Inject는 각각해야 함.
		@Inject
		MessageDAO messageDao;
		@Inject
		PointDAO pointDao;
		
		// 트랜잭션 처리대상 method : 하나 실패시 롤백.
		@Transactional
		@Override
		public void addMessage(MessageDTO dto) {
			// 메시지를 테이블에 저장
			messageDao.create(dto);
			// 메시지를 보낸 회원에게 10 포인트 추가
			pointDao.updatePoint(dto.getSender(), 10);
		}
		======================================================================================================
		> @Transactional : 트랜잭션 처리대상 method. 하나 실패시 롤백.
		> 서비스 : 여러 DAO메소드를 호출 할 수 있음. DAO보다는 큰 업무단위.
		
	- com.example.spring02.controller.message : MessageController.java
		> @RestController : 스프링 4.0부터 사용가능
			==================================================================================================
			* 어노테이션
				- @RequestBody : 클라이언트 --> 서버(json데이터가 입력될 때) => 해당 매개변수 앞에 위치
				- @ResponseBody : 서버 --> 클라이언트(json) => 메소드 상단에 위치
					> json String --> dto로 변환
				- ResponseEntity : 리턴값=json+에러메시지 // 클래스
				
			* 작성한 컨트롤러 코드	
			@RestController
			@RequestMapping("messages/*")
			public class MessageController {
				
				@Inject
				MessageService messageService;
				
				// ResponseEntity : 리턴값=json+에러메시지
				// ResponseEntity<String> : String의 형태로 리턴값(json+에러메시지)가 넘어감.
				@RequestMapping(value="/", method=RequestMethod.POST) // ~messages/ 까지 요청 시 작동.
				public ResponseEntity<String> addMessage(@RequestBody MessageDTO dto) {
					ResponseEntity<String> entity = null;
					try {
						messageService.addMessage(dto);
						entity = new ResponseEntity<>("success", HttpStatus.OK); // 200
					} catch (Exception e) {
						e.printStackTrace();
						entity = new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST); // 400
					}
					return entity;
				}
			}
			==================================================================================================
		
		> Advanced REST Client 사용을 위해 설치 : 크롬 확장프로그램 Advanced REST Client
			- 폼을 따로 만들지 않고 웹페이지에 값을 전송 할 수 있음.
			- 입력데이터를 json으로 보내기 위해 사용.
			========================================================================================================
			* REST uri
				- REST(REpresentational State Transfer) : 하나의 uri가 하나의 고유한 리소스를 대표하도록 설계된 개념
				- 파라미터로 표시되는 uri
					> http://localhost:8080/spring02/reply/list?bno=1
				- REST방식의 uri
					> http://localhost:8080/spring02/reply/list/1
				- ResponseEntity : 컨트롤러를 호출하여 데이터와 http상태 코드를 동시에 리턴가능하게 함
				- 컨트롤러에 json data를 전달하는 테스트를 위해 크롬에 Advanced REST Client 확장프로그램 설치
			
			* http응답코드
				- 200 : ok. 요청이 성공적으로 수행되었음
				- 400 : Bad request. 사용자의 잘못된 요청을 수행 할 수 없음. 
					> ex) 보내는(받는)쪽의 변수가 있으나 받는(보내는)쪽에 변수가 없음
				- 404 : Not found. 요청한 페이지 없음
				- 500 : Internal Server Error.
				
			* http 메소드 종류
				- get : 서버에 요청
				- post : 서버에 전달
				- head 
					> get과 유사. 웹서버에서 헤더정보 이외에는 다른데이터를 보내지 않음. 
					> 다운여부 점검, 웹서버 정보(버전 등)을 얻기위해 사용.
				- options : 시스템에서 지원되는 메소드 종류를 확인
				- put : 전체 수정
				- delete : 삭제
				- patch : 일부분 수정
			========================================================================================================

	- 테스트 : Advanced REST Client
		> post, http://localhost:8080/spring02/messages/, json형식으로 데이터 전송
			-------------------------------------------------------------------------------------------------
			{"targetid":"user01", "sender":"user00", "message":"Good morning" }
			-------------------------------------------------------------------------------------------------
			- 성공 시 200 ok, DB에 업데이트.
		
		> 에러 발생 테스트 : 메시지저장(성공) + 포인트 올리기(에러) --> 롤백
			- mapper query 임시수정 : 임의부분 오타 - 400에러 발생
>>			- query의 변수( #{}안 )이름 수정 시 트랜젝션 실패.
		
  5> AOP테스트 
  	- com.example.spring02.aop : MessageAdvice.java
  		====================================================================================================
		@Controller : 컨트롤러
		@Service : 서비스
		@Repository : 모델(dao)
		@Component : 공통적인 bean 
		
		@After : 요청 후 처리
		@Before : 요청 전 처리
		@Around : 요청 전후 처리
		
		@Before, @After ==> JoinPoint 사용
		@Around ==> ProceedingJoinPoint 사용
		
		@Component // 기타 bean
		@Aspect	// aop bean -  공통업무를 지원하는 코드
		public class MessageAdvice {
			
			private static final Logger logger = LoggerFactory.getLogger(MessageAdvice.class);
			
			@Before("execution(* com.example.spring02.service.message.MessageService*.*(..))")
			public void startLog(JoinPoint jp) {
				logger.info("핵심 업무의 코드정보: "+ jp.getSignature());
				logger.info("method: "+ jp.getSignature().getName());
				logger.info("매개변수: "+ Arrays.toString(jp.getArgs()));
			}
			
			@Around("execution(* com.example.spring02.service.message.MessageService*.*(..))")
			public Object timeLog(ProceedingJoinPoint pjp) throws Throwable	{
				//호출 전
				long start = System.currentTimeMillis();
				
				//대상 메소드 호출
				Object result = pjp.proceed();
				
				//호출 후
				long end = System.currentTimeMillis();
				logger.info(pjp.getSignature().getName()+":"+(end-start));
				logger.info("================");
				return result;
			}
		}
  		====================================================================================================












