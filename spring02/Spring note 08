lec 14 21:00 ~

10. 코드 난독화

 1) 자바스크립트 난독화(!= 암호화. 난독화 : 노출되 있으나 읽기 어렵게 만듦.)
 	- 자바스크립트는 클라이언트에서 실행되는 스크립트 언어이므로 소스코드가 그대로 노출됨.
 	- 자바스크립트 난독화 사이트 : http://dean.edwards.name/packer/ - 난독화/디코드 모두 가능
 	- base62 encode : 긴 url을 짧게 줄이는 알고리즘
 	- Shrink variables : 변수명을 짧게 줄임
 	
 2) 자바스크립트 난독화 실습
  1> views/shop/product_edit.jsp
  	- 난독화 이전의 코드
  		===============================================================================================
		function product_delete() {
		>> 해당범위만 난독화
			if(confirm("삭제하시겠습니까?")) {
				document.form1.action="${path}/shop/product/delete.do";
				document.form1.submit();
			}
		<<
		}
  		===============================================================================================
  	- 난독화 이후의 코드
  		===============================================================================================
		eval(function(p,a,c,k,e,r){e=function(c){return c.toString(a)};if(!''.replace(/^/,String))
		{while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};
		while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}
		('2(3("삭제하시겠습니까?")){0.1.4="${5}/6/7/8.9";0.1.a()}',11,11,
		'document|form1|if|confirm|action|path|shop|product|delete|do|submit'.split('|'),0,{}))
  		===============================================================================================
  		> 난독화 시 el(${})을 인식 할 수 없으므로, 직접 주소를 입력해준다 : spring02/shop/product/delete.do

 3) 자바코드 난독화 (Java Code Obfuscation)
	- 자바 프로그램은 디컴파일(decompile), 디스어셈블(disassemble)이 가능하므로 코드 난독화가 필요함.
	- 프로가드(proguard) : 대표적인 자바 난독화 라이브러리
	- 변수명, method name을 읽기 어렵게 변환함
	- 난독화를 해도 근본적으로 디컴파일은 막기 어려움
	- spring 프로젝트보다는 자바프로젝트에 적합(war파일보다는 jar파일로 export할 경우에 적합함.)
		> 어노테이션, xml설정 등에는 난독화 적용이 어려움.
		> war, jar에는 class파일이 있으므로 쉽게 디스어셈블 가능.
	- 역어셈블(디스어셈블) : Hello.class --> Hello.java
	- 디어셈블러 프로그램 : jd-gui

 4) 자바코드 난독화 실습
 	- jd-gui(자바 디컴파일러), 자바 실습소스
 	- 자바 실습소스를 이클립스로 import한 후 jar파일로 export
 	- jd-gui에서 export한 jar파일을 열어서 디컴파일된 소스코드 확인
 	- 프로가드 사이트 : http://proguard.sourceforge.net
 	
 	- proguard(오픈소스) 6.0 다운로드 주소 : https://sourceforge.net/projects/proguard/files/
 	
 	- 난독화 테스트할 jar파일 준비 (jsp프로젝트보다는 java프로젝트로 테스트하는 것이 더 좋음),
 	 jar파일을 찾기 쉬운 경로에 미리 복사
 	
 	- 압축해제 후 cmd로 접속
 	
 	- 프로가드 폴더의 하위 lib디렉토리에서 java -jar proguardgui.jar입력
 	
 	- 좌측메뉴 Input/Output을 누른 후 우측상단의 Add Input, Add output버튼을 클릭하여 원본 jar파일과
 	 변환할 jar파일을 입력함
 	 
 	- 하단의 rt.jar파일의 경로가 정확한지 확인하여야 함.
 	- 추가로 프로젝트의 외부라이브러리를 rt.jar가 위치한 화면에 추가
 	
 	- Add Input : 원본 jar파일
 	- Add Output : 변환되어 출력되는 jar파일
 	
 	- next버튼을 계속 누른다(option설정화면을 skip)
 	- 난독화 처리가 완료된 후, jd-gui.exe 프로그램을 실행하여 변수, method등이 읽기 어렵게 변경된 것을 확인

	- jar파일을 배포하는 경우, 이처럼 난독화를 시킨 후 배포하여야 함.


>>lec14 47:00	
11. 파일 업로드 (ajax방식)

 1) 실습예제 : ajax방식으로 이미지 업로드
  1> menu.jsp : <a href="${path}/upload/uploadAjax">업로드(ajax)</a>
  2> util.MediaUtils.java
  3> util.UploadFileUtils.java
  	- 파일 업로드를 할 때 파일의 이름이 중복되지 않도록 하기 위해 uuid를 사용.
  	- uuid는 16바이트 숫자로 구성되며 중복가능성이 없다고 보장할 수는 없으나 거의 중복이 없다고 봄
  	- uuid는 밀리세컨드+db시퀀스로 구성되며 16바이트 (128비트), 32개의 십육진수로 표현, 총 36개 문자.
  		> 32개 문자와 4개의 하이픈 : 8-4-4-4-12
  		> 550e8400-e29b-41d4-a716-446655440000
  	- uploadFile(), makeIcon(), makeThumbnail(), calcPath(), makeDir()로 구성
  	- 가변사이즈 매개변수, 배열 참조변수
  		> private static void makeDir(String uploadPath, String... paths) { ... }
  			- String... : 가변사이즈 매개변수. paths --> 배열 참조변수
		> makeDir(uploadPath, yearPath, monthPath, datePath) 
			- 첫번째 매개변수 이후 세 변수값은 String... paths로 정의된 것.
	
  4> contorller.upload.AjaxUploadController.java
  	- 동일 url이 존재하더라도 요청방식에 따라 구별되어 중복될 수 있음.
		> @RequestMapping(value="/upload/uploadAjax", method=RequestMethod.POST, produces="text/plain;charset=utf-8")
	- @ResponseBody : 서버 --> 클라이언트(뷰가 아닌 데이터 리턴)
	- @RequestBody : 클라이언트 --> 서버(json 형식으로 전달)
	- ResponseEntity : 메시지 + http상태 코드

  5> uploadAjax.jsp
  	- drag&drop방식으로 파일 업로드.
  	- 브라우저의 기본 기능인 파일 열기를 막고 실행되도록 처리.
  	- js: 기본효과 막기/ 파일추가/삭제 /섬네일 생성판단 등등..

>> lec 15 ~ 화면에서 삭제기능 추가
  6> 삭제기능 추가 --> 이미지 클릭 시 오류발생 (400)
  	- uploadAjax.jsp : 삭제요청 기능 - span클릭 시 ajax로 삭제요청 + 리턴값에 따라 태그 삭제
  	- AjaxUploadController.java : 컨트롤러에서 요청값을 받아 삭제, Status리턴

>> lec 15 33:00 ajax upload 종료


12. 이메일 보내기

 1) 이메일 서비스 구축방법
 	- 이메일 발송을 위해서는 메일 서버가 필요함
 	- 자체구축
 	- 포털사이트에서 제공하는 smtp(Simple Mail Transfer Protocol) server활용
 	- gmail의 경우 : 내 계정-로그인 및 보안 - 기기활동 및 알림 - 보안수준이 낮은 앱 허용 옵션을 사용으로 설정
 	
 2) 실습예제 설정
  1> pom.xml 에 라이브러리 추가 : javax.mail/mail/1.4.7, org.springframework/spring-context-support/spring version
  	- 빌드가 잘 안될 경우 스프링의 버전을 조정할 필요가 있음
  	- 유사한 이름의 라이브러리 주의 : artifactId를 확인할 것
  	=============================================================================================================
		<!-- 이메일 발송 관련 라이브러리 -->
		<!-- https://mvnrepository.com/artifact/javax.mail/mail -->
		<dependency>
		    <groupId>javax.mail</groupId>
		    <artifactId>mail</artifactId>
		    <version>1.4.7</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-context-support -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-context-support</artifactId>
		    <version>${org.springframework-version}</version>
		</dependency>
  	=============================================================================================================
  
  2> root-context.xml에 메일 발송을 위한 bean등록
  	=============================================================================================================
		<!-- 메일 발송을 위한 bean -->
		<bean id = "mailSender" class = "org.springframework.mail.javamail.JavaMailSenderImpl">
			<property name="host" value="smtp.gmail.com" />
			<property name="port" value="587" />
			<property name="username" value="이메일 주소" />
			<property name="password" value="비밀번호" />
			<property name="javaMailProperties">
				<props>
					<prop key="mail.transport.protocol">smtp</prop>
					<prop key="mail.smtp.auth">true</prop>
					<prop key="mail.smtp.starttls.enable">true</prop>
					<prop key="mail.debug">true</prop>
				</props>
			</property>
		</bean>
  	=============================================================================================================

 3) 코드 작성
  1> com.example.spring02.model.email : EmailDTO.java - 필드, getter/setter toString
  2> com.exmaple.spring02.service.email : EmailService.java, EmailServiceImpl.java
  	- root-context.xml에 등록된 bean을 inject하여 사용.
  		========================================================================================================
			//서비스 빈으로 등록
			@Service
			public class EmailServiceImpl implements EmailService {
				
				@Inject
				JavaMailSender mailSender; // root-context.xml에 설정한 bean
				
				@Override
				public void sendMail(EmailDTO dto) {
					try {
						// 이메일 객체
						MimeMessage msg = mailSender.createMimeMessage();
						// 받는사람
						msg.addRecipient(RecipientType.TO, new InternetAddress(dto.getReceiveMail()));
						// 보내는 사람(이메일 주소 + 이름)
>>						msg.addFrom(new InternetAddress[] {
							new InternetAddress(dto.getSenderMail(), dto.getSenderName())
						});
						//이메일 제목
						msg.setSubject(dto.getSubject(), "utf-8");
						//이메일 본문
						msg.setText(dto.getMessage(), "utf-8");
						//이메일 보내기
						mailSender.send(msg);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			
			}
  		========================================================================================================
  
  3> view 구성
  	- 메뉴 추가 : views/include/admin_menu.jsp
	- 작성페이지 : views/email/write.jsp
  
  4> com.example.spring02.controller.email : EmailController.java - 이메일 페이지로 이동/ 발송
	============================================================================================================
		@Controller
		@RequestMapping("email/*")
		public class EmailController {
			
			@Inject
			EmailService emailService;
			
			@RequestMapping("write.do")
			public String write() {
				return "/email/write";
			}
			
			@RequestMapping("send.do")
			public String send(@ModelAttribute EmailDTO dto, Model model) {
				try {
					emailService.sendMail(dto);
					model.addAttribute("message", "이메일이 발송되었습니다.");
				} catch (Exception e) {
					e.printStackTrace();
					model.addAttribute("message", "이메일 발송실패...");
				}
				return "/email/write";
			}
		}
	============================================================================================================

>> lec 15 1:01:00 ~
13. Smart Editor

 1) Smart Editor
 	- WYSIWYG(위지윅 에디터, what you see is what you get)
 	- 사용자가 현제 화면에서 보고있는 내용과 동일한 html code를 생성하는 에디터
 	- 네이버, 다음 에디터, CKEditor(opensource), SummerNote(opensource) 등
 
 2) CKEditor
 	- http://ckeditor.com, 4.8버전으로 실습
	- 이미지 업로드를 위해서는 별도의 작업필요
	- ckeditor 홈페이지에서 다운로드 필요 https://ckeditor.com/ckeditor-4/download/, standard package
	- 받은 파일을 압축해제하고 views/에 복사
	
 3) CKEditor 실습예제
  1> servlet-context.xml에 리소스 매핑 추가
 	- <resources location="/WEB-INF/views/ckeditor/" mapping="/ckeditor/**" />
  2> 대상 화면에 적용
 	- ckeditor.js참조 : <script src="${path}/ckeditor/ckeditor.js"></script>
  	- ckeditor를 적용할 태그에 작성
  		======================================================================================================
		<div style="width:80px;">
			내용
			<textarea id="description" name="description" rows="5" cols="80" placeholder="상품설명을 입력하세요">
			</textarea>
			
			<!-- textarea를 스마트 에디터로 변경 -->
			<script>
			//id가 description인 태그에 ckeditor를 적용시킴.
			//CKEDITOR.replace("description"); // 이미지 업로드 안됨.
			//이미지 업로드를 할 경우
			CKEDITOR.replace("description", {
				// 이미지 업로드 탭 기능 활성화, 파일업로드 컨트롤러 작업필요.
				filebrowserUploadUrl : "${path}/imageUpload.do"
			});
			</script>
		</div>
  		======================================================================================================
	- shop/write.jsp에 적용
	- 적용 후에는 대상태그를 숨기고 해당위치에 ckeditor를 보여주는 태그가 새로 생성되며, 입력도 이곳에 된다.
	- 기존에 존재하던 form전송 script를 변경하여야 함.
  
  3> 이미지 업로드 기능
  	- 스크립트 변경
  		======================================================================================================
			CKEDITOR.replace("description", {
				// 이미지 업로드 탭 기능 활성화, 파일업로드 컨트롤러 작업필요.
				filebrowserUploadUrl : "${path}/imageUpload.do"
			});
  		======================================================================================================
	
	- com.example.spring02.controller.upload : ImageUploadController.java
	
	- 해당 기능의 이미지 업로드는 설명란에 입력됨
	- 업로드된 상품 db의 이미지 항목을 확인하면 링크만 존재하는것을 확인할 수 있음.

>> lec 15 1:37:00 ~

 4) SummerNote
 	- http://summernote.org
 	- 이미지를 텍스트 형식으로 저장함(테이블에 이미지 전체 저장) 
 		> *ckeditor - 이미지 업로드, 테이블에 이미지 태그만 저장)
 		> 이미지 전체를 저장하므로 컨트롤러를 따로 구현할 필요가 없음.
 		> db가 무거워짐

	- 다운로드 받아 views/에 압축해제한 폴더안의 dist폴더를 복사하여 붙여넣고 폴더이름 변경
	
  1> servlet-context.xml에 리소스 매핑 추가
 	- <resources location="/WEB-INF/views/summernote/" mapping="/summernote/**" />
 
  2> 대상화면에 적용 - memo_list.jsp
  	============================================================================================================
	** bootstrap, jquery, summernote 설정 필요.
	
		<!-- bootstrap style 적용 -->
		<link href="http://netdna.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.css" rel="stylesheet">
		
		<!-- bootstrap script 적용 -->
		<script src="http://netdna.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.js"></script>
		
		<!-- summernote style 적용 -->
		<link href="http://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.12/summernote.css" rel="stylesheet">
		
		<!-- summernote script 적용 -->
		<script src="http://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.12/summernote.js"></script>
		
		...
		메모 : <textarea rows="3" cols="50" name="memo" id="memo"></textarea>
		...
		
		<script>
		$(function() {
			//id가 memo인 태그를 summernote로 변경.
			$("#memo").summernote({
				height: 150,
				width: 300
			});	
		});
		</script>
  	============================================================================================================
  	> 이미지 등록시 화면에는 표시되지만 db의 테이블 필드 사이즈가 작아 500에러 발생
  	> 테이블의 해당 필드 형식을 clob(mysql: text)으로 변경 --> 이미지와 문자열 모두 정상출력 
	> 수정화면(view.jsp)에서도 동일하게 수정
