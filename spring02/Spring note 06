lec 11 ~

6. pdf생성
 
 1) itextpdf 라이브러리
  - http://itextpdf.com
  - API : http://devleopers.itextpdf.com/examples-itext5
  - 한글 처리를 위해서는 폰트 정보가 필요함.
  
 2) 실습예제 : spring02에 생성
  1> pom.xml에 라이브러리 추가 : 추가 이후 ctrl+shift+f
  	-----------------------------------------------------------------------------------------------------------
		<!-- pdf생성관련 라이브러리 -->
		<!-- https://mvnrepository.com/artifact/com.itextpdf/itextpdf -->
		<dependency>
		    <groupId>com.itextpdf</groupId>
		    <artifactId>itextpdf</artifactId>
		    <version>5.5.13</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.itextpdf/itext-pdfa -->
		<dependency>
		    <groupId>com.itextpdf</groupId>
		    <artifactId>itext-pdfa</artifactId>
		    <version>5.5.13</version>
		    <scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.itextpdf/itext-xtra -->
		<dependency>
		    <groupId>com.itextpdf</groupId>
		    <artifactId>itext-xtra</artifactId>
		    <version>5.5.13</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.itextpdf.tool/xmlworker -->
		<dependency>
		    <groupId>com.itextpdf.tool</groupId>
		    <artifactId>xmlworker</artifactId>
		    <version>5.5.13</version>
		</dependency>
		<!-- 한글처리를 위한 라이브러리 -->
		<!-- https://mvnrepository.com/artifact/com.itextpdf/itext-asian -->
		<dependency>
		    <groupId>com.itextpdf</groupId>
		    <artifactId>itext-asian</artifactId>
		    <version>5.2.0</version>
		</dependency>
  	-----------------------------------------------------------------------------------------------------------
  
  2> table형식 출력테스트 : 장바구니를 pdf로 출력
	- views/include/admin_menu.jsp : pdf메뉴 추가.
  
  	- controller.pdf.PdfController.java
  	- service.pdf.PdfService.java, PdfServiceImpl.java
  		: CartService를 inject
	- model : 장바구니를 pdf로 출력하므로 CartDTO, CartDAO, CartDAOImpl사용.
  	- view작성 : views/pdf/result.jsp
  	
  	- Controller
  	  ========================================================================================================
  	  	package com.example.spring02.controller.pdf;

		import javax.inject.Inject;
		
		import org.springframework.stereotype.Controller;
		import org.springframework.web.bind.annotation.RequestMapping;
		import org.springframework.web.servlet.ModelAndView;
		
		import com.example.spring02.service.pdf.PdfService;
		
		@Controller
		@RequestMapping("pdf/*")
		public class PdfController {
		
			@Inject
			PdfService pdfService;
		
			@RequestMapping("list.do")
			public ModelAndView list() throws Exception {
				//pdf 파일 생성
				String result = pdfService.createPdf();
				//화면이동
				return new ModelAndView("pdf/result", "message", result);
			}
		}
  	  ========================================================================================================
		> service를 호출하여 pdf를 생성하고, 결과메시지를 화면에 출력.
		> new ModelAndView("pdf/result", "message", result) : 화면 경로, model의 변수명, 값 으로 구성.
		
	- Service
	  ========================================================================================================
		package com.example.spring02.service.pdf;
		
		import java.io.FileOutputStream;
		import java.util.List;
		
		import javax.inject.Inject;
		
		import org.springframework.stereotype.Service;
		
		import com.example.spring02.model.shop.dto.CartDTO;
		import com.example.spring02.service.shop.CartService;
		import com.itextpdf.text.Chunk;
		import com.itextpdf.text.Document;
		import com.itextpdf.text.Element;
		import com.itextpdf.text.Font;
		import com.itextpdf.text.Paragraph;
		import com.itextpdf.text.Phrase;
		import com.itextpdf.text.pdf.BaseFont;
		import com.itextpdf.text.pdf.PdfPCell;
		import com.itextpdf.text.pdf.PdfPTable;
		import com.itextpdf.text.pdf.PdfWriter;
		
		@Service
		public class PdfServiceImpl implements PdfService {
		
			@Inject
			CartService cartService;
			
			@Override
			public String createPdf() {
				String result = "";
				try {
					// pdf 문서 객체 생성 : pdf 내용을 채우는 객체
					Document document = new Document();
					//pdf 생성 객체 : outputStream의 경로가 c인경우 관리자 권한이 필요하므로,
					//				하위 디렉토리를 만들거나 다른 드라이브에 저장한다.
					PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream("e:/sample.pdf"));
					//pdf 문서열기
					document.open();
					//한글이 지원되는 폰트 지정
					// : 한글은 기본적으로 폰트가 깨지므로 폰트 폴더에 들어가 경로와 폰트 파일이름을 확인하여 설정한다.
					// BaseFont.IDENTITY_H, BaseFont.EMBEDDED : options
					BaseFont baseFont = BaseFont.createFont("c:/windows/fonts/malgun.ttf",
																BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
					// 폰트 사이즈 지정
					Font font = new Font(baseFont, 12);
					// pdf에 table을 생성 : 4컬럼의 테이블
					PdfPTable table = new PdfPTable(4);
					// 출력할 내용
					Chunk chunk = new Chunk("장바구니", font);
					// 문단
					Paragraph ph = new Paragraph(chunk);
					ph.setAlignment(Element.ALIGN_CENTER); //가운데 정렬
					document.add(ph);
					
					document.add(Chunk.NEWLINE); //줄바꿈 처리
					document.add(Chunk.NEWLINE);
					//document.add(Chunk.NEXTPAGE); //다음페이지로
					//document.newPage(); //페이지 나누기
					
					// 셀 생성(<td>) : 테이블의 타이틀 행 생성
					PdfPCell cell1 = new PdfPCell(new Phrase("상품명", font));
					PdfPCell cell2 = new PdfPCell(new Phrase("단가", font));
					PdfPCell cell3 = new PdfPCell(new Phrase("수량", font));
					PdfPCell cell4 = new PdfPCell(new Phrase("금액", font));
		
					// 가운데 정렬 : addCell전에 설정필요
					cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell4.setHorizontalAlignment(Element.ALIGN_CENTER);
					
					// 테이블에 셀 추가
					table.addCell(cell1);
					table.addCell(cell2);
					table.addCell(cell3);
					table.addCell(cell4);
					
					// 임의 사용자의 id를 매개값으로 지정, 장바구니 목록 리턴
					List<CartDTO> items = cartService.listCart("kim");
					
					for (int i=0; i<items.size(); i++) {
						CartDTO dto = items.get(i); // i번째 레코드를 dto에 저장
						
						PdfPCell cellProductName = new PdfPCell(new Phrase(dto.getProduct_name(), font));
						cellProductName.setHorizontalAlignment(Element.ALIGN_CENTER);
						table.addCell(cellProductName); // 테이블에 셀 추가
		
						// PdfPCell에는 String만 매개값이 될 수 있음 : Integer.toString() or + "" 사용하여 자료형 변경.
						// PdfPCell cellPrice = new PdfPCell(Integer.toString(new Phrase(dto.getPrice(), font)));
						PdfPCell cellPrice = new PdfPCell(new Phrase(dto.getPrice()+"", font));
						cellPrice.setHorizontalAlignment(Element.ALIGN_RIGHT);
						table.addCell(cellPrice);
						
						PdfPCell cellAmount = new PdfPCell(new Phrase(dto.getAmount()+"", font));
						cellAmount.setHorizontalAlignment(Element.ALIGN_RIGHT);
						table.addCell(cellAmount);
						
						PdfPCell cellMoney = new PdfPCell(new Phrase(dto.getMoney()+"", font));
						cellMoney.setHorizontalAlignment(Element.ALIGN_RIGHT);
						table.addCell(cellMoney);
					}
					
					// document에 테이블 추가
					document.add(table);
					// pdf 파일이 생성됨
					document.close();
					
					result = "pdf파일이 생성되었습니다.";
				} catch (Exception e) {
					result = "pdf파일 생성실패.";
					e.printStackTrace();
				}
				return result;
			}
		
		}
	  ========================================================================================================
  		> ArrayList
  			- size() : 아이템의 갯수
  			- get(인덱스) : n번째 값
  			- add(값) : 추가
  		> PdfPCell : string만 매개값이 될 수 있음.
  	
  	
7. 차트
 1) 구글차트
   - https://google-developers.appspot.com/chart/
   - json형식으로 리턴되는 결과값을 받아 화면에 차트를 그림.
 
 2) 작업순서
   - pom.xml에 라이브러리 추가
   	=========================================================================================================
	<!-- 구글차트 생성관련 라이브러리 -->
		<!-- https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple -->
		<dependency>
		    <groupId>com.googlecode.json-simple</groupId>
		    <artifactId>json-simple</artifactId>
		    <version>1.1.1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
		<dependency>
		    <groupId>com.fasterxml.jackson.core</groupId>
		    <artifactId>jackson-databind</artifactId>
		    <version>2.9.4</version>
		</dependency>
   	=========================================================================================================
   		> json-simple : JSONObject( 자바코드를 이용하여 json객체를 생성해주는 객체.)를 사용하기 위한 라이브러리
   
   - 자바스크립트를 이용하여 차트 작성에 필요한 json데이터를 리턴받아 화면에 출력
   	=========================================================================================================
	<!-- 구글 차트 호출을 위한 js파일 -->
	<script type="text/javascript" src="https://www.google.com/jsapi"></script>
	<script type="text/javascript">
		// 구글차트 라이브러리 로딩
		google.load("vizualization", "1", {
			"packages":["corechart"]
		});
		//	라이브러리 로딩이 완료되면 drawChart 함수 호출
		google.setOnLoadCallback(drawChart);
		function drawChart(){
			var jsonData = $.ajax({
				url : "${path}/json/sampleData.json",
				dataType : "json",
				async : false,
				// success : function(result){
				
				// }
			}).responseText;
		}
	</script>
   	=========================================================================================================
  	
  - JSON데이터의 형식
  	> JSON객체 : {"변수":값}
  	> JSON객체 배열 : []
  	> 혼합하여 작성가능 : 객체 안에 배열, 배열안에 객체 가능
  		----------------------------------------------------------------------------------------------------
	  	{
	  		"cols" : [
	  			{"id":"", "label":"Topping", "pattern":"", "type":"string"},
	  			{"id":"", "label":"Slices", "pattern":"", "type":"number"},
	  		],
	  		"rows" : [
	  			{"c": [ {"v":"Mushrooms"}, {"v":3} ] },
	  			{"c": [ {"v":"Onions"}, {"v":1} ] },
	  			{"c": [ {"v":"Olives"}, {"v":1} ] },
	  			{"c": [ {"v":"Zucchini"}, {"v":1} ] },
	  			{"c": [ {"v":"Pepperoni"}, {"v":2} ] },
	  		]
	  	}
  		----------------------------------------------------------------------------------------------------
  
 3) 구글차트 실습예제 : DB에서 리스트를 받아 json객체를 생성 --> 화면의 js가 차트를 그림
   1> views/include/admin_menu.jsp에 메뉴추가
   	- Google Chart
  	 	> <a href = "${path}/chart/chart1.do">구글차트(json)</a>
   	 	> <a href = "${path}/chart/chart2.do">구글차트(db)</a>
   	 - JFreeChart : png, pdf로 차트를 생성할 수 있다.
   	 	> <a href = "${path}/jchart/chart1.do">JFreeChart(png)</a>
   	 	> <a href = "${path}/jchart/chart2.do">JFreeChart(pdf)</a>
   	 
   2> 코드 작성
   	 - 장바구니의 정보를 이용하여 차트 작성 : Controller / Service작성, DTO / DAO는 cart를 이용.
   	 - controller.chart.GoogleChartController.java
   	 - service.chart.GoogleChartService.java, GoogleChartServiceImpl.java
   	 - Controller - @RestController / servlet-context.xml -  resource mapping
   	 
   3> chart1.do : 더미파일을 이용하여 차트를 화면에 그림
   	 - controller.chart.GoogleChartController.java
   	 	> @RestController
			- REST : REpresentitive State Transfer. 리소스(게시물, 레코드)마다 고유한 주소를 할당.
			- RestController : Spring 4.0부터 지원
			- ajax --> json형식으로 리턴
				> 기본적으로 컨트롤러의 메소드의 리턴값은 jsp페이지로 넘어가는 것(redirect, forward).		
				> Controller : @ResponseBody를 붙이면 json등의 일반 자료형으로 리턴할 수 있음.
				  ex) ------------------------------------------------------------------------------------
			 		@Controller
					@RequestMapping("chart/*")
					public class GoogleChartController {
			
						@ResponseBody
						@RequestMapping("chart1.do")
						public MemberDTO chart1() {
							return new MemberDTO();
						}
					}
				  ---------------------------------------------------------------------------------------
				> RestController : @ResponseBody없이 일반자료형으로 리턴가능 
  	
  	- 더미파일 작성
  		> views/json/sampleData.json 작성 : 구글차트에서 요구하는 형식으로 작성.
  		> http://localhost/spring02/json/sampleData.json --> 404에러 발생 (*단순 연결거부 시 port번호 넣어 다시 시도)
  			- 원래는 json구조의 파일내용이 화면에 출력되어야 하지만, 파일을 찾을 수 없음
  			- servlet-context.xml에 디렉토리가 등록되어 있지 않기 때문에 해당 url요청을 서블릿으로 이해하여 발생
  			- servlet-context.xml에 리소스로 등록
  				> <resources mapping="/json/**" location="/WEB-INF/views/json/" />
  				> location=리소스의 실제 경로. mapping=url pattern.
  	
  	- views/chart/chart01.jsp 작성
  		=========================================================================================================
		<!-- 구글 차트 호출을 위한 js파일 -->
		<script type="text/javascript" src="https://www.google.com/jsapi"></script>
		<script type="text/javascript">
			// 구글차트 라이브러리 로딩
			google.load("visualization", "1", {
				"packages":["corechart"]
			});
			//	라이브러리 로딩이 완료되면 drawChart 함수 호출
			google.setOnLoadCallback(drawChart);
			function drawChart(){
				// 차트 그리기에 필요한 json데이터 로딩
				var jsonData = $.ajax({
					url : "${path}/json/sampleData.json",
					dataType : "json",
					async : false	// 동기식
					// success : function(result){
					// 	jsonData = result;
					// }
				}).responseText;
				console.log(jsonData);
				
				// json을 dataTable로 변환
				var data = new google.visualization.DataTable(jsonData);
				console.log("dataTable : "+ data);
				
				// div에 pie차트를 그림
				// var chart = new google.visualization.PieChart(document.getElementById("chart_div"));
		
				// div에 line차트를 그림
				// var chart = new google.visualization.LineChart(document.getElementById("chart_div"));
		
				// div에 column차트를 그림
				var chart = new google.visualization.ColumnChart(document.getElementById("chart_div"));
				
				chart.draw(data, {
					title : "chart예제",
					width : 600,
					height : 440,
					
					// curveType : "function", // LineChart옵션 : 곡선처리
				});
			}
		</script>
	   	=========================================================================================================
	   	> load(), setOnLoadCallback()등의 함수는 js파일에 정의되어 있음.
  		> async : false => 동기식으로 설정.
  			- 동기식 : a작업이 끝나면 b작업을 진행 = a->b 순차적으로 진행
  			- 비동기식 : a와 b 작업을 동시진행 --> b작업에 a작업의 리턴값이 필요한 경우, 동시에 끝나지 않아 오류발생.
  		> .responseText
  			- 서버의 응답을 텍스트 문자열로 반환할 것이다. 
  			- ' success : function(result){jsonData = result;} '의 의미.
  	
   4> chart2.do : db의 자료를 json으로 변환, 화면에 차트로 출력
   	 - chart2() --> jsp페이지로 이동 --> ajax로 data를 받아 화면에 그림 
   	 - Controller : chart2(), cart_money_list() 작성.
   	 	> chart2() : chart2.jsp로 화면이동
   	 	> cart_money_list() : view(jsp)로 넘어가지 않고 호출한 곳에 JSONObject를 리턴함.
   	 
   	 - chart02.jsp작성 : ajax의 요청경로 수정
  	 
  	 - service.chart.GoogleChartService.java, GoogleChartServiceImpl.java작성
  	 	> JSONObject : json-simple 라이브러리가 있어야 사용가능. 자바코드를 이용하여 json객체를 생성해주는 객체.
  		> googlechart에 정의된 형식에 맞게 json객체를 구성 : JSONObject, JSONArray를 혼합하여 구성한다
  		> cartService를 호출하여 cartMoney()실행, 데이터를 받아 json객체 작성
  		=========================================================================================================
			@Service
			public class GoogleChartServiceImpl implements GoogleChartService {
				
				// DI : 장바구니 서비스 주입
				@Inject
				CartService cartService;
				
				// ArrayList --> json객체로 변경
				// {"변수명" : [{},{},{}], "변수명":"값"}의 형태로 만들기 위해 객체를 생성/삽입
				@Override
				public JSONObject getChartData() {
					List<CartDTO> items = cartService.cartMoney();
					
					//리턴할 최종 json객체 : {}
					JSONObject data = new JSONObject(); // {}
					
					// 컬럼을 정의할 json 객체 : {}
					JSONObject col1 = new JSONObject(); // {}
					JSONObject col2 = new JSONObject(); // {}
					
					// json의 배열객체 : []
					JSONArray title = new JSONArray();
					
					col1.put("label", "상품명"); // {"":""}
					col1.put("type", "string"); // {"":"", "":""}
					col2.put("label", "금액"); // {"":""}
					col2.put("type", "number"); // {"":"", "":""} 
					
					// 타이틀행에 컬럼추가 : json배열에 json객체 추가
					title.add(col1);	// [{"":"", "":""} ]
					title.add(col2);	// [{"":"", "":""}, {"":"", "":""}]
					
					// json객체에 타이틀행(table의 header) 추가
					data.put("cols", title);
					// 			--> {"cols":[{"label":"상품명","type":"string"}, {"label":"금액","type":"number"}]}
					
					// rows : table의 각 행
					JSONArray body = new JSONArray();
					
					for(CartDTO dto : items) {
						//상품명
						JSONObject name = new JSONObject();
						name.put("v",dto.getProduct_name());
						//금액
						JSONObject money = new JSONObject();
						money.put("v",dto.getMoney());
						
						JSONArray row = new JSONArray();
						row.add(name);
						row.add(money);
						
						JSONObject cell = new JSONObject();
						cell.put("c", row);
						
						//레코드 1개 추가
						body.add(cell);
					}
					data.put("rows", body);
					
					return data;
				}
			}  		
  		=========================================================================================================
  		 
  	- model 작성 : 상품별 장바구니 금액 통계를 위한 DAO, mapper작성
	  	> cartMapper.xml에 mapping추가
	  		-----------------------------------------------------------------------------------------------------
				<select id = "cart_money" resultType = "com.example.spring02.model.shop.dto.CartDTO">
					select product_name, sum(price*amount) money
						from cart c, product p
						where c.product_id = p.product_id
						group by product_name
						order by product_name
				</select>  	
	  	 	-----------------------------------------------------------------------------------------------------
	 	> cartDAOImpl, cartServiceImpl의 cartMoney() 작성
  	
 4) JFreeChart
   - http://www.jfree.org/jfreechart/
   - 다양한 형태의 차트 지원
   - swing, jsp, servlet에서 많이 사용되고 있음.
   - pdf, png, jpg등의 다양한 이미지 파일 형식으로 export가능.
   - 오픈소스 라이브러리
   
   1> pom.xml : jfreechart 라이브러리 추가 (여기서는 다른 라이브러리와의 호환성을 위해 1.0.18로 작업)
   
   2> JFreeChart실습예제
   	- 구글차트 : DB에서 리스트를 받아 json객체를 생성 --> 화면의 js가 차트를 그림
   	- JFreeChart 
   		> 전체 java코드로 작성. JSON을 생성하지 않고 차트 객체를 만들어 화면에 전송.
   		> DB의 table --> 리스트를 받아옴 --> 데이터셋(차트 객체) --> 화면에 차트 그리기
   	1) JFreeChart png출력 예제
   		- controller.chart.JFreeChartController.java 작성
   		- service.chart.JFreeChartService.java, JFreeChartServiceImpl.java 작성
   			> GoogleChart와 같이 장바구니 서비스/DAO를 호출하여 사용.
   			> 전체 java코드로 작성 : DB의 table --> 리스트를 받아옴 --> 데이터셋(차트 객체) --> 화면에 차트 그리기
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	