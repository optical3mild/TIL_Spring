Spring 03강~

1. 실행순서 복습
   *서버 startup -->  web.xml --> DispatcherServlet --> servlet-context.xml (컨트롤러 등록 / url mapping)
   *url 요청 (~/) --> HomeController.java의 home() 실행 --> 코드 실행 후 home으로 포워드(return "home")
 	--> DispatcherServlet이 다시 요청 가로챔(?) --> servlet-context.xml의 ViewResolver에 정의된 접두 접미로 요청완성
 	--> 해당 경로로 포워딩

 -- web.xml ------------------------------------------------------------------------------------------
	<!-- 스프링의 환경설정 파일 로딩 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!-- 서블릿의 환경설정 -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	===============================================================================
	** url pattern
		> /    : default servlet --> DispatcherServlet [ servlet-context.xml참조 ]
				(tomcat의 default를 사용하지 않고 spring의 web.xml에서 새로 등록)
		> /*   : 모든 요청 (서블릿 + jsp)
		> *.do : 확장자가 do인 서블릿
		
		example)
		> restful한 url : http://localhost/spring01/board/view/1
		> 기존 : http://localhost/spring01/board/view.do?idx=1
		
		**tomcat에 내장된 서블릿 (tomcat이 설치된 폴더의 web.xml파일에 설정되어 있음.)
			> DefaultServlet : 서블릿 클래스 매핑 --> dispatcherServlet
				(tomcat의 default를 사용하지 않고 spring의 web.xml에서 새로 등록)
			> JspServlet : *.jsp페이지 매핑
			
			>>모든요청을 dispatcherServlet(default)로 처리하면 404에러 발생.
				: jsp페이지를 찾지 못하게되어 이동불가. 404발생.
		
	** servlet mapping url과 동일하게 요청이 들어오면 
	  dispatcherservlet이 요청을 가로채고, servlet-context.xml을 참조하여 처리한다.
	  (view resolver로 등록된 prefix와 suffix를 참조하여 요청 완성,
	  base-package로 등록되어 있는 패키지에 포함된 클래스들이 메모리에 로드되어 있고,
	  그 중에서 요청과 맞는 컨트롤러를 검색하여 처리)
	  
	** Controller의 메소드에서 model : request역할에 해당.
	
	** root-context.xml : 서블릿 이외의 설정(DBCP)
	** servlet-context.xml : 서블릿에 관련된 설정
		> context:component-scan 태그가 없으면 컨트롤러 인식이 안됨 = 스프링에서 컨트롤러로 등록되지 않음.
		> servlet class에서 자주 사용하는 어노테이션
			@Controller : 컨트롤러 빈
			@Repository : DAO(데이터베이스 관련 작업)빈
			@Service : 서비스(비즈니스 관련 로직)빈
			@Inject : 의존관계 주입
	===============================================================================	
	
	<!-- 한글 처리를 위한 인코딩 필터 : 스프링에 내장되어 있는 CharacterEncodingFilter 동작 -->
	<filter>
		<filter-name>encoding</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encoding</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
----------------------------------------------------------------------------------------------------	
	
2. Spring 디렉토리 구조
	src/main/java - 자바 코드 (Controller, Model, Service)
	src/main/resources - 자바코드에서 참조하는 리소스 파일들 : sqlMapConfig.xml, **MyBatis의 Mapper.

	src/test/java - 테스트 관련 코드
	src/test/resources - 테스트 코드에서 참조하는 리소스 파일들
	
	
	src/main/webapp - 웹서비스 루트 디렉토리(외부에서 접근가능)
	src/main/webapp/resources - js,css,image 등의 웹리소스 파일
	
	src/main/webapp/WEB-INF - 외부에서 접근 불가능(보안을 위해서). 컨트롤러를 경유해 접근 가능.

	src/main/webapp/WEB-INF/classes - 컴파일된 클래스
	src/main/webapp/WEB-INF/spring - 스프링의 환경설정파일
	
	src/main/webapp/WEB-INF/spring/root-context.xml - 서블릿과 관련되지 않은 모든 리소스에 대한 설정
	src/main/webapp/WEB-INF/spring/servlet-context.xml - 서블릿과 관련된 리소스에 대한 설정
	
	src/main/webapp/WEB-INF/views - html, jsp 페이지
	
	pom.xml - 메이븐에서 참조하는 라이브러리들에 대한 설정파일.


3. 의존관계 : DI, IoC 설명
	*spring01 패키지 하위 test패키지 생성, MemberUse클래스 생성. 작성내용 참조.

4. Maven Repository 조회
	http://mvnrepository.com
	설정 dependancy태그이하를 ctrl+c하여 pom.xml에 ctrl+v 
	
	
===================================================================
	
[2. spring과 mybais의 연동]	
	

1. 로깅툴

1> 로깅툴을 사용하는 이유
 - System.out.println() 명령어는 IO리소스를 많이 사용하여 시스템이 느려질 수 있음.
 - 로그를 파일로 저장하여 분석할 필요가 있음.
 
2> 로깅툴의 종류
 - commons-logging : 스프링3에서 사용하던 로깅툴.
 - log4j : 효율적인 메모리관리로 그동안 많이 사용되었음.
 - logback : log4j보다 성능이 더 우수하여 최근에 많이 사용되고 있음.
 - SLF4J : logback을 사용하기 위한 인터페이스.
	
3> SLF4J 설정방법 =======================================================================
1. pom.xml의  properties태그 내 slf4j-version을 1.7.25 로 설정.
	
	<properties>
		<!-- 자바버전을 1.8로 변경-->
		<java-version>1.8</java-version>
		<!-- spring framework 버전을 5.0.3으로 변경. -->
		<org.springframework-version>5.0.3.RELEASE</org.springframework-version>

<!-- 이하 sample에서 복사. -->		
		<org.aspectj-version>1.9.2</org.aspectj-version>
		<org.slf4j-version>1.7.25</org.slf4j-version>
	</properties>
	
2. pom.xml에 관련된 라이브러리 추가 - dependancy이하 내용, 필요 목록 정리필요.

3. src/main/resources에 logback.xml파일 작성

4. 로그를 수집할 클래스에 변수 선언
 private static final Logger logger = LoggerFactory.getLogger(로그를 수집할 클래스이름.class);
  > private : 외부에서 로그를 가로채지 못하도록 하기 위해 설정.
  > static final : 로그 내용이 바뀌지 않으므로 상수로 설정.
  
5. 로그를 수집할 method에서 로그 수집 명령어 호출
 logger.info("로그 타이틀", 출력할 값);
 
=============================================================================================

4> 로그의 level
 - Debug : Debug, Info, Warn, Error 포함
 - Info : Info, Warn, Error 포함
 - Warn : Warn, Error 포함
 - Error : Error 포함
 

2. 데이터베이스 연결설정 및 테스트

1> 오라클 테이블 스페이스 생성(56:00). --> mysql에 'spring'으로 생성.
	: 사용자 계정 생성 - spring/1234
	
	[sql 사용자 계정생성, 권한부여]===================================================================
	mysql -u root -p
	
	> create user 'spring'@'localhost' identified by '1234'
	> grant all privileges on *.* to 'spring'@'localhost'
	> grant all privileges on *.* to 'spring'@'%' identified by '1234'
	> flush privileges;
	========================================================================================

2> src/test/java/OracleConnectionTest.java --> MysqlConnectionTest.java
	: 데이터베이스 연결을 테스트하기 위한 테스트 케이스 작성.
	
	개발 --> 테스트 --> 검수 --> 서비스 개시
	> 테스트 단계에서 실제 기능을 하나하나 구동하여 확인할 수 있으나, 비효율적.
	> 테스트 케이스를 만들어서 테스트 --> 자동화 (JUnit) : JUnitTestCase
	> Ctrl+F11 or classfile을 JUnitTest로 구동.
	
	<JUnit Test Case를 생성, 코드 작성 : MysqlConnectionTest.java 참조.>
	****pom.xml의 설정을 참조하여 JUnit의 현재버전을 확인.
	- example -------------------------------------------
	package com.example.spring01;
	
	import java.sql.Connection;
	import java.sql.DriverManager;
	
	import org.junit.Test;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
	
	public class MysqlConnectionTest {
		//로깅 처리를 위한 코드
		private static final Logger logger =
		
		...
			
	}
	------------------------------------------------

3> DB : MyBatis 설정 테스트 - src/test/java/MybatisTest.java
 - 자바 코드에 데이터베이스 연결 문자열 등의 중요한 정보를 직접 입력하는 것은 위험. --> decompile시 노출됨.
 - mybatis 관련 bean의 의존관계(root-context.xml의 BeansGraph탭 확인.)
 	---------------------------------------------------------------------
 	sqlSession[reference <sqlSessionFactory>]
 	--> sqlSessionFactory [datasource, configLocation, mapperLocations]
 	--> dataSource [driverClassName, url, username, password]
 	---------------------------------------------------------------------
 	> SqlSessionTemplate : SqlSession 객체생성.
 	> SqlSessionFactoryBean : SqlSessionTemplate 객체생성.
 	> DriverManagerDataSource : DB연동 클래스. datasource에 DB연동이 다 포함되어 설정됨.
    
 	>> SqlSessionFactoryBean --> SqlSessionTemplate --> SqlSession(code에서 사용하는 객체.)

	**DBCP설정 : root-context.xml
	===============================================================================================
	**** <bean > --> 서버가 시작될 때 spring에서 생성하여 메모리에 로드되고 관리됨.
	
	<bean id = "참조변수" class = "자료형">
 	ex) <bean id = "str" class = "String"> --> String str = new String();
 	
 	3. <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
 	> id : 참조변수, class : 자료형
 	
		<!-- 드라이버 클래스 이름이 변경됨 -->
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		> property : 멤버변수, name = 변수명, value = 값
		> 드라이버 클래스 : DriverSpy - 실행한 쿼리가 로그로 출력됨. 어디까지 실행되었는지 확인가능.
		
		<!-- 연결문자열에 log4jdbc가 추가됨 : 실행과정을 log로 남기기 위해 삽입. -->
		<property name="url" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:xe" />
		> <property name="url" value="jdbc:log4jdbc:mysql://localhost:3306/spring?characterEncoding=UTF-8&serverTimezone=UTC" />
		
		<property name="username" value="hr" />
		<property name="password" value="hr" />
	</bean>
	
	2. <!-- SqlSessionFactory 객체 주입 : 자료형 sqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		> 현재 파일인 root-context.xml의 dataSource 항목을 참조
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
		> MyBatis 설정파일의 경로. spring에서는 aliases설정 이외에는 다른설정필요 없음.
		<property name="mapperLocations" value="classpath:mappers/**/*Mapper.xml"></property>
		> MyBatis mapper 파일의 경로.
		> classpath = src디렉토리 (src/main/resources)
		> /** = 모든 하위디렉토리. 중간에 하위 디렉토리가 위치하여도 된다는 뜻.
	</bean>
	
	1. <!-- SqlSession 객체 주입 : SqlSessionTemplate 생성-->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"
		destroy-method="clearCache">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		> constructor : 생성자. sqlSessionFactory가 들어가 있음
		> ref : 참조항목의 name. 현재 파일인 root-context.xml의 sqlSessionFactory 항목을 참조
	</bean>
	===============================================================================================
 
 - MybatisTest class작성. 파일 참조 : 실행하면 console에 아래 내용이 출력됨.
	> 드라이버 로드 로그 : Loaded JDBC driver: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
	> sqlSessionFactory 인스턴스 확인 : sqlFactory:org.apache.ibatis.session.defaults.DefaultSqlSessionFactory@5032714f
	> sqlSession 확인 : sqlSession:org.apache.ibatis.session.defaults.DefaultSqlSession@7c137fd5
	> class에 작성된 logger내용 출력 : mybatis 연결성공


3. Controller와 view의 연결 실습

1> controller.MainController.java : 컨트롤러 패키지 생성, MainController작성.
	- http://localhost/spring01/ --> MainController의 main() 실행
	- main.jsp를 생성 ( 그 전에 기존의 homeController의 controller를 주석처리하여 요청 충돌방지)
	
2> 구구단 페이지 실습
	- views/include/header.jsp - jstl, jquery, contextPath 설정(자주 사용하므로 등록)
		**contextPath ---------------------------------------------------------------------------------
		WAS(Web Application Server)에서 웹어플리케이션을 구분하기 위한 path.
		한 web server에서 여러개의 홈페이지를 운영하고 싶을 때 사용하는 방법. apache의 가상호스팅 개념.
		이클립스에서 프로젝트를 생성하면 , 자동으로 server.xml에 추가된다.
		-----------------------------------------------------------------------------------------------
		
		> jsp, servlet은 mapping이 되나 이미지,css,js들은 mapping이 되지않음 --> 설정필요.
		================================================================================================
		- 설정하지 않았을 때 .jsp, .html등의 페이지 요청을 제외한 모든요청은 DispatcherServlet에서 처리하므로
		  이미지, css, js등의 리소스파일들은 DispatcherServlet이 처리하려고 시도하지만 처리되지 못하고
		  브라우저에서 오류가 발생한다.
		  
		- js, css, png, jpg 등등 --> resource로 처리하여야 함.
			> servlet-context.xml에서 설정 : <resources mapping="/resources/**" location="/resources/" />
			> mapping : 가상경로, location : 실제 경로
			>> js등의 파일을 jsp등에서 참조/include할 때 작성하는 경로는 mapping에 작성된 경로에 부합되어야 함.
		================================================================================================
		
	- views/include/menu.jsp - 메뉴 생성하여 main.jsp에 삽입
	- views/main.jsp
	- views/gugu.jsp - 구구단 출력페이지.
	- MainController.java에 gugu.do 요청 시 작동될 method 추가, 매핑.
		> gugu.do가 요청될 때 MainController의 gugu()가 실행되도록 mapping
		> MainController.java의 @RequestMapping(gugu.do)이하 참조.
		 ( @RequestMapping 작성형식, 값을 전달받는 방법 @RequestParam(defalutValue="기본값") 확인할 것.)	

>>spring 03 종료.
>>spring 04강 ~ (controller-view 연결, mybatis-spring연동으로 DB연결 실습)

3> test 메뉴 구현 - MainController.java에 test(), do*()추가.
	- test.do(서블릿) --> MainController.java (url mapping) --> test.jsp
	- 서블릿 --> DefaultServlet(기본) --> DispatcherServlet이 가로채서 처리(spring에 내장. web.xml에 기본 서블릿으로 재설정)
	  --> servlet-context.xml 참조, base-package안의 클래스들을 서버가 시작될 때 메모리에 로드
	  		(**로드된 클래스들은 explorer의 icon에 파란색 S표시가 되며, spring에서 관리하는 빈이 된다.)
	  --> MainController에 mapping이 되어있는 것을 확인하여 메소드를 처리하고 포워딩하면서 결과를 test.jsp로 넘김
	 
	- test.jsp 작성
	  > .html, .htm : 일반 웹페이지. tomcat을 경유하지 않고 통과시킴.
	  > .jsp : JspServlet 경유
	  > 서블릿(doA, hello.do 등의 페이지 외 기타형태) : DispatcherServlet(재설정됨)을 경유

	- MainController에 test(), doA()추가. --> class파일 참조.
	
	- MainController에 doA()추가, doA.jsp 작성 - model을 이용한 값 전달 코드(이전과 비교 축약된 부분 설명)예시
	- MainController에 doB()추가, doB.jsp 작성 - 리턴타입이 void인 경우 포워딩 예시
	- MainController에 doC()추가, doC.jsp 작성 - Map/HashMap과 ModelAndView 사용하여 값을 넘겨주고 포워딩.
		> productDTO 생성.
			---------------------------------------------------------------------------------------------------------
			- 패키지 추가 : com.example.spring01.model.dto (com.example.spring01 : three level package, 기본패키지)
			- ProductDTO 생성 : 필드, 생성자, getter/setter, toString
			---------------------------------------------------------------------------------------------------------
		> doC.jsp 작성.
		> controller에서 ModelAndView로 넘겨준 model인 "map"안애 DTO객체가 있으므로 map.product로 객체에 접근.
		> map.product.name으로 객체의 속성에 접근.
	
	- MainController에 doD()추가, doD.jsp 작성 - "redirect:"를 이용, test/doE로 매핑되어 있는 서블릿 요청 메소드로 넘김.
	  ==== forward와 redirect ================================================================================
		forward : 주소 그대로, 화면 이동, 데이터 전달. --> 화면은 바뀌지만 주소는 변경되지 않는다.
		redirect : 주소 변경, 화면 이동, get방식으로 소량의 데이터만 전달 가능(초과분은 손실됨). 
		
		** spring에서는 일반 return은 forward, return "redirect:..."는 redirect
		
>>		** forward는 주소가 바뀌지 않는다? : url이 변경되지 않는다. --> 구체적 내용 확인하여 정리할 것....
	  ========================================================================================================

	- MainController에 doF()추가, test.jsp에 script doF() 작성 - js, ajax를 이용하여 background로 서버와 통신.
		> ajax : 비동기적인 방식 - 화면이 이동되지 않고 background에서 서버와 통신이 이루어짐.
		> controller doF()메소드 작성 : 포워딩이 되지않게 작성 --> 뷰를 리턴하는 것이 아닌 데이터만 리턴.
		> test.jsp
			- 페이지에 작성된 js function doF()의 ajax 통신 성공으로 받는 매개변수 result의 값 = DTO 
			- $ is not defined --> jquery가 인식되지 않는경우. jquery include확인필요
			- servlet-context.xml에 resources태그로 js등의 리소스 파일이 위치한 경로 추가필요.
			
			** jsp, servlet은 mapping이 되나 이미지, css, js들은 mapping이 되지않음 --> 설정필요.
			================================================================================================
			> .html, .htm : 일반 웹페이지. tomcat을 경유하지 않고 통과시킴.
	  		> .jsp : JspServlet 경유
	  		> 서블릿(doA, hello.do 등의 페이지 외 기타형태) : DispatcherServlet(재설정됨)을 경유
		
			- 설정하지 않았을 때 .jsp, .html등의 페이지 요청을 제외한 모든요청은 DispatcherServlet에서 처리하므로
		  	이미지, css, js등의 리소스파일들은 DispatcherServlet이 처리하려고 시도하지만 처리되지 못하고
		  	브라우저에서 오류가 발생한다.
		  
			- js, css, png, jpg 등등 --> resource로 처리하여야 함.
				> servlet-context.xml에서 설정 : <resources mapping="/resources/**" location="/resources/" />
				> mapping : 가상 경로, location : 실제 경로
				>> js등의 파일을 jsp등에서 참조/include할 때 작성하는 경로는 mapping에 작성된 경로에 부합되어야 함.
				ex) spring01의 경우 : <resources mapping="/include/**" location="/WEB-INF/views/include/" />
					- WEB-INF아래 경로생성 : 보안을 위한 권장사항(외부에서 접근불가한 경로)
					- /** : 모든 하위디렉토리를 포함한다.
			================================================================================================
		
			- 404에러 : controller의 해당 method(doF())에 @RequestBody 추가 - 없는경우 포워드 시도로 브라우저에서 404에러 발생
			- 500에러 : ajax비동기 통신으로 객체 자체를 주고받으려면 컨버터가 필요(컨버터를 이용 json형식으로 주고받아야 함)
				> json 데이터 형식 : {"변수":"값", "변수":"값"}
				> Maven 저장소에서 라이브러리 추가필요 (mvnrepository.com) - pom.xml에 "jackson-databind"라이브러리 추가
					(jackson-databind : @ResponseBody가 작동하기 위한 라이브러리. dto를 json형식으로 변환한다.)
		
		> test.jsp - doF()
			- json 형식으로 리턴됨 : 리턴값으로 새로운 dto를 생성하고 @ResponseBody가 dto를 json으로 변환하여 반환.
>>확인필요	- js(jquery ajax)에서는 받은 json을 다시 변환해줄 필요없이 js 객체로 인식하여 바로 속성을 불러올 수 있다.
					
	- SampleRestController : doF() 기능과 동일한 기능 구현.
		> spring 4.0 이상부터 사용가능한 ajax처리 전용 컨트롤러(백그라운드에서 실행됨.)
		> @RestController 사용. 앞서 작성한 MainController의 doF()와 동일한 기능을 함(객체를 json으로 리턴)
			{ name : "냉장고", price : 500000 } 으로 리턴됨 --> js에서는 객체로 바로 인식가능
		> ajax처리의 경우, view를 불러오는 경우보다 data를 받는 경우가 많으므로 RestController를 사용.
		> SampleRestController.java 참조.
		
4> 작성되어 있는 클래스의 JUnit TestCase작성, test : src/test/java/MainControllerTest.java
	- 어떠한 클래스에 대해 작동여부와 논리적 오류 검증을 위해 TestCase를 작성할 수 있다.
	  > 코드를 작성하기 전 기능을 점검하기 위해 TestCase를 사전에 만들어 확인하는 경우( ex> MybatisTest.java )
	  > 코드를 작성한 후 코드의 검증을 위해 작성하는 경우 (이번에 작성하는 class)
	  	- JUnit을 이용하면 작성한 TestCase Class 만으로도 테스트가능. (view 필요 없음.)
	  	- Spring perspective의 package explorer에서 작성된 MainController를 우클릭하여 해당 클래스의 JUnit testcase작성 가능.
	  		> 해당 클래스의 모든 메소드들을 목록으로 보여주고 testcase로 작성할 부분을 선택하여 생성할 수 있음.
	   		> 자동으로 test경로에 JUnit TestCase생성 (코드 추가작성 필요)
	- 코드 추가작성 : MainControllerTest.java참조.	
		
		
4. 회원정보관리 예제 - DB연동실습.
 1> 회원관리의 전체적인 구조 - mvc + service단
 	- Controller
 		> MemberController.java
 	
 	- Service : Controller가 직접 Model을 호출하지 않고 Service를 호출, Service에서 Model을 호출
 		> MemberService.java - 인터페이스
 		> MemberServiceImpl.java - 구현클래스
 	
 	- Model
 		> MemberDAO.java - 인터페이스
 		> MemberDAOImpl.java - 구현클래스
 		> MemberDTO.java
 		> memberMapper.xml - Sql mapper(Mybatis)

	- View
		> member_list.jsp - 목록
		> write.jsp	- 추가
		> view.jsp - 상세정보 + 수정 + 삭제
		
 2> member 테이블
  Oracle =============================================================================================
 	create table member (
 		userid varchar2(50) not null primary key,
 		passwd varchar2(50) not null,
 		name varchar2(50) not null,
 		email varchar2(50),
 		join_data date default sysdate
 	);
 	
 	insert into member (userid,passwd,name,email) values ('kim', '1234', '김철수', 'kim@gmail.com');
 	
 	select * from member;
 	
 	select count(*) from member where userid = 'kim' and passwd = '2222';
 	
 	commit;
 ======================================================================================================
 
  MySql================================================================================================
  	- varchar2 없음, sysdate는 now()로 date는 datetime(시간을 포함한 날짜)로 변경.
  	- docker이용 시 timezone 설정 확인할 것. ( 설정이 되어있지 않은 경우 KST가 아니라 UTC로 출력됨 )
  		> select now(); --> 현재시간과 일치하는지 확인
  		> set global time_zone='Asia/Seoul'; --> DB의 timezone 설정
>>  	> set time_zone='Asia/Seoul'; --> 스키마의 timezone 설정(?) 
											(--> 현재 session에 적용되는 것인지 정확히 확인 할 것.)
  	
  	create table member (
 		userid VARCHAR(50) not null primary key,
 		passwd VARCHAR(50) not null,
 		name VARCHAR(50) not null,
 		email VARCHAR(50),
 		join_data datetime DEFAULT NOW()
 	);

	insert into member (userid, passwd, name, email) values ('kim', '1234', '김철수', 'kim@gmail.com');

	select * from member;
 	
 	select count(*) from member where userid = 'kim' and passwd = '2222'; --> 결과없음.
 	
 	// commit; --> oracle에만 해당.
	===================================================================================================

 3> model.dto.MemberDTO.java 작성.
 	- com.example.spring01 패키지 아래 model패키지 생성하여 작성.
	- 기본 패키지인 spring01밖에 생성 시, servlet-context.xml에 설정되어 있는 basepackage 밖에 class가 있으므로 인식되지 않음.
		> servers가 시작될 때 spring에서 메모리에 자동으로 로드하고 관리.
	- date형 --> import시 java.util.date로드.
	
 4> controller.MemberController.java 작성 - memberList(Model model)
 	- Controller, DAO, Service --> 스프링에서 관리 : new 생성자를 이용하여 인스턴스 생성하지 않음.
 	- @Controller/ @Service / @Repository 등 annotation으로 표시.
	
  **후속작업
 	- Controller --> Service --> DAO --> SqlSession --> Mapper
>>	- @Inject
>>	- Sqlsession : 클래스, 객체의 용도, 사용법, 정의 정리할 것.

>> MyBatis mapper작성법 정리할 것.
 5> mapper 작성 : memberMapper.xml
 	- root-context.xml에 mapper를 작성할 위치 설정(현재는 되어 있음.프로젝트 생성 시 작성함.)
 	- SqlSessionFactory 객체주입 태그의 property로 mapperLocation이 정의되어 있음.
 	- mapper.xml 작성 시 namespace 확인 : 코드에서 'namespace.id' 형식으로 호출.
 	- resultType의 경로가 틀릴경우, 서버가 멈춤. 주의할 것. 경로가 길어지면 allias를 작성하여 작성부담을 줄일 것.
 	- allias 작성위치 : mybatis-config.xml의 typeAlliases태그.
>>	- sql문이 실행되고, record하나가 dto에 쌓이고 arrayList가 만들어져서 data가 넘어감. (?)
	
 6> model.dao.MemberDAO.java, MemberDAOImpl.java 작성.
	- 강한 결합관계 : A클래스에서 C클래스를 바로 호출하여 사용  --> C클래스의 수정이 발생한 경우 A클래스도 수정필요.
	- 느슨한 결합관계 : A는 B인터페이스를 호출하고 B가 C를 호출 --> C클래스의 수정/개발이 보다 자유로움.
	
 	- MemberDAO.java : 인터페이스. spring에서 권장하는 느슨한 결합관계를 형성하기 위해(유지보수에 효율적)
		> implements MemberDAO
			- 구현클래스는 MemberDAOImpl.java로 작성하여 구현. 실제 기능은 구현클래스에서 담당.
			- 클래스 생성창에서 add를 통해 어떤 인터페이스를 구현할 지 미리 작성하고 메소드 전체목록을 오버라이드 할 수 있다.

	- MemberDAOImpl.java : 구현클래스.
		> @Repository 
			- 현재클래스를 dao bean으로 등록시킴. (현재클래스를 스프링에서 관리하는 dao bean으로 설정.)
			- @Repository 가 붙은 클래스는 직접 생성시킬 수 없게되며 spring에 lifecycle을 맡기게 됨.
			- 서버가 시작될 때 자동으로 싱글톤으로 생성되어 메모리에 로드됨.
		> @Inject /n SqlSession sqlSession
>>			- MyBatis manager를 사용하여 offsession으로(?) 인스턴스를 생성하는 방법 대신에 @Inject를 사용하여 주입. 
			- MyBatis의 SqlSession객체를 스프링에서 생성하여 주입시킴.
			- 의존관계 주입(Dependancy Injection, DI), 느슨한 결합, IoC(Inversion of Control, 제어의 역전)
		==========================================================================================================	
		**의존관계 주입 
		1) MemberController -> MemberService -> MemberDAO(*Impl호출 생략) -> SqlSession -> memberMapper.xml  
		 - 전체 흐름 : 위 순서대로 앞의 코드가 화살표로 가리킨 코드를 호출. 앞선 코드는 뒤의 코드에 의존한다.
		 - 뒤 코드가 바뀌면 그 앞의 코드들은 전부 바뀌어야 한다. (강한 결합관계)
		
		2) MemberDAO <- SqlSession <- Spring Framework
		 - SqlSession 객체를 Spring에서 생성하여 주입시키는 경우, 의존관계가 느슨해짐.
		 - Spring이 SqlSession을 생성하고 SqlSession은 MemberDAO에 주입되어 의존관계가 역전됨.(IoC)
		==========================================================================================================
			- sqlSession은  root-context.xml에 정의되어 있음.
				> bean의 id가 sqlSession(주입되는 변수명과 동일), class가 org.mybatis.spring.SqlSessionTemplate로 등록.
>>				> 해당 bean tag의 destroy-method = "clearCache" : ???
			- 결론적으로 @Inject를 통해 SqlSessionTemplate클래스로 sqlSession을 생성하는 과정을 축약하여 작성하는것.
					
		> 각각의 구현메소드에서는
			- 인스턴스를 생성하지 않음, close()를 작성하지 않음(수행 시 error발생 - spring에 제어권이 넘어가 있기 때문)
			
 7> service.MemberService.java, MemberServiceImpl.java
 	- service : dao보다는 좀더 큰 분류로 하나의 service는 여러 dao와 연결되어 호출할 수 있음.
 	- 구현클래스
 		> @Service : 스프링에서 관리하도록 제어권을 넘김.
 		> @Inject로 dao인스턴스를 주입.
 			- 어노테이션을 붙여 spring에서 관리하도록 만든 클래스는 new로 생성이 불가능하다
				(= spring에서 lifecycle을 관리. new로 생성, close()등 임의로 관여불가. spring에서 생성하여 넣어주어야 사용가능.) 
			- 자바코드 MemberDAO memberDao = new MemberDAOImpl();로 작성되는 것을 @Inject MemberDAO memberDao로 축약
			- 자료형을 인터페이스와 동일하게 작성하여도 컴파일러에서는 구현 클래스를 찾아 인스턴스를 생성하여 주입시켜 준다.
				= MemberDAO, MemberDAOImpl 둘다 사용가능하다. 
		> 사용할 메소드에서 주입된 객체를 호출하여 리턴 : return memberDao.memberList();
	
	- MemberController에 코드 추가.
		> Controller -> service -> dao,  dao -> service -> Controller
		> Controller에서는 service를 호출하고 모델에 리턴값을 저장 후 포워딩.
		> @Inject로 MemberService를 주입하여야 메소드내에서 호출 가능.
>>		> 포워딩 시 model에 저장된 값도 같이 전달된다.

** bean등록의 기준 ===========================================================================================
	스프링에서 관리하는 bean
		1. single ton 객체 : 서버가 구동중일 때, 하나만 생성하여 사용하는 객체.
		2. 영속적인 객체 (persistence object) : 서버가 시작해서 끝날 때 까지 메모리에 상주하는 객체
		- service, controller, dao등은 위의 조건에 부합.
		- dto는 필요할 때 생성, 삭제하여야 하므로 등록하지 않음.

	--> "전체 사용자가 하나의 인스턴스를 공유하여 사용할 수 있는(하여야 하는) 경우에 bean으로 등록하여 사용"
==============================================================================================================
 8> member_list.jsp 작성.
	- controller가 페이지로 포워딩과 동시에 model에 저장된 값을 전달해줌. ('list'로 보냄)
	- 페이지에서 'list'로 dto의 List를 받을 수 있음.
	- forEach문으로 table형태로 화면에 출력가능.
	- 500 error : root-context의 jdbc driver url의 value 내용 중 &이 인식되지 않아 연결실패 발생 --> &amp;로 변경.
>>lec04 끝
>>lec05
	- fmt로 날짜형식 변경
	- 회원등록 버튼추가 --> 컨트롤러에 추가 필요.

 9> write.jsp 작성, controller에 write.do와 insert.do 작성
 	- write.do : 등록페이지
 	- insert.do : db등록버튼
	- @ModelAttribute
		> 생략가능. 해당 객체를 폼에서 전달되는 값을 저장하는 객체로 지정.
 	- @ModelAttribute / @RequestParam
		> 매개변수를 여러개로 하여 각 태그를 @RequestParam을 이용하여 따로 받을 수 있음. 
		> 이 경우에는 코드에서 dto를 따로 호출하여 저장하는 과정이 필요함.  = 코드가 길어짐.

 10> mapper 추가 : memberMapper.xml에 insert tag (id : insertMember)
 	- insert.do --> memberController.java --> MemberService.java(Impl생략) --> MemberDAO.java(Impl생략) --> memberMapper.xml
 

































	